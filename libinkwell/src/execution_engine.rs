# ! [doc = " Runtime code generation and execution."] pub use llvm_sys :: execution_engine :: * ; use llvm_sys :: prelude :: * ; use llvm_sys :: target :: LLVMTargetDataRef ; use llvm_sys :: target_machine :: { LLVMCodeModel , LLVMTargetMachineRef } ; # [no_mangle] pub unsafe extern "C" fn LLVMLinkInMCJIT () { llvm_sys :: execution_engine :: LLVMLinkInMCJIT () } # [no_mangle] pub unsafe extern "C" fn LLVMLinkInInterpreter () { llvm_sys :: execution_engine :: LLVMLinkInInterpreter () } # [no_mangle] pub unsafe extern "C" fn LLVMCreateGenericValueOfInt (Ty : LLVMTypeRef , N : :: libc :: c_ulonglong , IsSigned : LLVMBool ,) -> LLVMGenericValueRef { llvm_sys :: execution_engine :: LLVMCreateGenericValueOfInt (Ty , N , IsSigned) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateGenericValueOfPointer (P : * mut :: libc :: c_void ,) -> LLVMGenericValueRef { llvm_sys :: execution_engine :: LLVMCreateGenericValueOfPointer (P) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateGenericValueOfFloat (Ty : LLVMTypeRef , N : :: libc :: c_double ,) -> LLVMGenericValueRef { llvm_sys :: execution_engine :: LLVMCreateGenericValueOfFloat (Ty , N) } # [no_mangle] pub unsafe extern "C" fn LLVMGenericValueIntWidth (GenValRef : LLVMGenericValueRef ,) -> :: libc :: c_uint { llvm_sys :: execution_engine :: LLVMGenericValueIntWidth (GenValRef) } # [no_mangle] pub unsafe extern "C" fn LLVMGenericValueToInt (GenVal : LLVMGenericValueRef , IsSigned : LLVMBool ,) -> :: libc :: c_ulonglong { llvm_sys :: execution_engine :: LLVMGenericValueToInt (GenVal , IsSigned) } # [no_mangle] pub unsafe extern "C" fn LLVMGenericValueToPointer (GenVal : LLVMGenericValueRef ,) -> * mut :: libc :: c_void { llvm_sys :: execution_engine :: LLVMGenericValueToPointer (GenVal) } # [no_mangle] pub unsafe extern "C" fn LLVMGenericValueToFloat (TyRef : LLVMTypeRef , GenVal : LLVMGenericValueRef ,) -> :: libc :: c_double { llvm_sys :: execution_engine :: LLVMGenericValueToFloat (TyRef , GenVal) } # [no_mangle] pub unsafe extern "C" fn LLVMDisposeGenericValue (GenVal : LLVMGenericValueRef) { llvm_sys :: execution_engine :: LLVMDisposeGenericValue (GenVal) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateExecutionEngineForModule (OutEE : * mut LLVMExecutionEngineRef , M : LLVMModuleRef , OutError : * mut * mut :: libc :: c_char ,) -> LLVMBool { llvm_sys :: execution_engine :: LLVMCreateExecutionEngineForModule (OutEE , M , OutError) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateInterpreterForModule (OutInterp : * mut LLVMExecutionEngineRef , M : LLVMModuleRef , OutError : * mut * mut :: libc :: c_char ,) -> LLVMBool { llvm_sys :: execution_engine :: LLVMCreateInterpreterForModule (OutInterp , M , OutError) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateJITCompilerForModule (OutJIT : * mut LLVMExecutionEngineRef , M : LLVMModuleRef , OptLevel : :: libc :: c_uint , OutError : * mut * mut :: libc :: c_char ,) -> LLVMBool { llvm_sys :: execution_engine :: LLVMCreateJITCompilerForModule (OutJIT , M , OptLevel , OutError) } # [no_mangle] pub unsafe extern "C" fn LLVMInitializeMCJITCompilerOptions (Options : * mut LLVMMCJITCompilerOptions , SizeOfOptions : :: libc :: size_t ,) { llvm_sys :: execution_engine :: LLVMInitializeMCJITCompilerOptions (Options , SizeOfOptions) } # [doc = " Create an MCJIT execution engine for a module, with the given options."] # [doc = ""] # [doc = " It is"] # [doc = " the responsibility of the caller to ensure that all fields in Options up to"] # [doc = " the given SizeOfOptions are initialized. It is correct to pass a smaller"] # [doc = " value of SizeOfOptions that omits some fields. The canonical way of using"] # [doc = " this is:"] # [doc = ""] # [doc = " ```c++"] # [doc = " LLVMMCJITCompilerOptions options{}"] # [doc = " LLVMInitializeMCJITCompilerOptions(&options, sizeof(options)){}"] # [doc = " // ... fill in those options you care about"] # [doc = " LLVMCreateMCJITCompilerForModule(&jit, mod, &options, sizeof(options),"] # [doc = "                                  &error){}"] # [doc = " ```"] # [doc = ""] # [doc = " Note that this is also correct, though possibly suboptimal:"] # [doc = ""] # [doc = " ```c++"] # [doc = " LLVMCreateMCJITCompilerForModule(&jit, mod, 0, 0, &error){}"] # [doc = " ```"] # [doc = ""] # [doc = " 0 is returned on success, or 1 on failure."] # [no_mangle] pub unsafe extern "C" fn LLVMCreateMCJITCompilerForModule (OutJIT : * mut LLVMExecutionEngineRef , M : LLVMModuleRef , Options : * mut LLVMMCJITCompilerOptions , SizeOfOptions : :: libc :: size_t , OutError : * mut * mut :: libc :: c_char ,) -> LLVMBool { llvm_sys :: execution_engine :: LLVMCreateMCJITCompilerForModule (OutJIT , M , Options , SizeOfOptions , OutError) } # [no_mangle] pub unsafe extern "C" fn LLVMDisposeExecutionEngine (EE : LLVMExecutionEngineRef) { llvm_sys :: execution_engine :: LLVMDisposeExecutionEngine (EE) } # [no_mangle] pub unsafe extern "C" fn LLVMRunStaticConstructors (EE : LLVMExecutionEngineRef) { llvm_sys :: execution_engine :: LLVMRunStaticConstructors (EE) } # [no_mangle] pub unsafe extern "C" fn LLVMRunStaticDestructors (EE : LLVMExecutionEngineRef) { llvm_sys :: execution_engine :: LLVMRunStaticDestructors (EE) } # [no_mangle] pub unsafe extern "C" fn LLVMRunFunctionAsMain (EE : LLVMExecutionEngineRef , F : LLVMValueRef , ArgC : :: libc :: c_uint , ArgV : * const * const :: libc :: c_char , EnvP : * const * const :: libc :: c_char ,) -> :: libc :: c_int { llvm_sys :: execution_engine :: LLVMRunFunctionAsMain (EE , F , ArgC , ArgV , EnvP) } # [no_mangle] pub unsafe extern "C" fn LLVMRunFunction (EE : LLVMExecutionEngineRef , F : LLVMValueRef , NumArgs : :: libc :: c_uint , Args : * mut LLVMGenericValueRef ,) -> LLVMGenericValueRef { llvm_sys :: execution_engine :: LLVMRunFunction (EE , F , NumArgs , Args) } # [no_mangle] pub unsafe extern "C" fn LLVMFreeMachineCodeForFunction (EE : LLVMExecutionEngineRef , F : LLVMValueRef ,) { llvm_sys :: execution_engine :: LLVMFreeMachineCodeForFunction (EE , F) } # [no_mangle] pub unsafe extern "C" fn LLVMAddModule (EE : LLVMExecutionEngineRef , M : LLVMModuleRef) { llvm_sys :: execution_engine :: LLVMAddModule (EE , M) } # [no_mangle] pub unsafe extern "C" fn LLVMRemoveModule (EE : LLVMExecutionEngineRef , M : LLVMModuleRef , OutMod : * mut LLVMModuleRef , OutError : * mut * mut :: libc :: c_char ,) -> LLVMBool { llvm_sys :: execution_engine :: LLVMRemoveModule (EE , M , OutMod , OutError) } # [no_mangle] pub unsafe extern "C" fn LLVMFindFunction (EE : LLVMExecutionEngineRef , Name : * const :: libc :: c_char , OutFn : * mut LLVMValueRef ,) -> LLVMBool { llvm_sys :: execution_engine :: LLVMFindFunction (EE , Name , OutFn) } # [no_mangle] pub unsafe extern "C" fn LLVMRecompileAndRelinkFunction (EE : LLVMExecutionEngineRef , Fn : LLVMValueRef ,) -> * mut :: libc :: c_void { llvm_sys :: execution_engine :: LLVMRecompileAndRelinkFunction (EE , Fn) } # [no_mangle] pub unsafe extern "C" fn LLVMGetExecutionEngineTargetData (EE : LLVMExecutionEngineRef ,) -> LLVMTargetDataRef { llvm_sys :: execution_engine :: LLVMGetExecutionEngineTargetData (EE) } # [no_mangle] pub unsafe extern "C" fn LLVMGetExecutionEngineTargetMachine (EE : LLVMExecutionEngineRef ,) -> LLVMTargetMachineRef { llvm_sys :: execution_engine :: LLVMGetExecutionEngineTargetMachine (EE) } # [no_mangle] pub unsafe extern "C" fn LLVMAddGlobalMapping (EE : LLVMExecutionEngineRef , Global : LLVMValueRef , Addr : * mut :: libc :: c_void ,) { llvm_sys :: execution_engine :: LLVMAddGlobalMapping (EE , Global , Addr) } # [no_mangle] pub unsafe extern "C" fn LLVMGetPointerToGlobal (EE : LLVMExecutionEngineRef , Global : LLVMValueRef ,) -> * mut :: libc :: c_void { llvm_sys :: execution_engine :: LLVMGetPointerToGlobal (EE , Global) } # [no_mangle] pub unsafe extern "C" fn LLVMGetGlobalValueAddress (EE : LLVMExecutionEngineRef , Name : * const :: libc :: c_char ,) -> u64 { llvm_sys :: execution_engine :: LLVMGetGlobalValueAddress (EE , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMGetFunctionAddress (EE : LLVMExecutionEngineRef , Name : * const :: libc :: c_char ,) -> u64 { llvm_sys :: execution_engine :: LLVMGetFunctionAddress (EE , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMExecutionEngineGetErrMsg (EE : LLVMExecutionEngineRef , OutError : * mut * mut :: libc :: c_char ,) -> LLVMBool { llvm_sys :: execution_engine :: LLVMExecutionEngineGetErrMsg (EE , OutError) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateSimpleMCJITMemoryManager (Opaque : * mut :: libc :: c_void , AllocateCodeSection : LLVMMemoryManagerAllocateCodeSectionCallback , AllocateDataSection : LLVMMemoryManagerAllocateDataSectionCallback , FinalizeMemory : LLVMMemoryManagerFinalizeMemoryCallback , Destroy : LLVMMemoryManagerDestroyCallback ,) -> LLVMMCJITMemoryManagerRef { llvm_sys :: execution_engine :: LLVMCreateSimpleMCJITMemoryManager (Opaque , AllocateCodeSection , AllocateDataSection , FinalizeMemory , Destroy) } # [no_mangle] pub unsafe extern "C" fn LLVMDisposeMCJITMemoryManager (MM : LLVMMCJITMemoryManagerRef) { llvm_sys :: execution_engine :: LLVMDisposeMCJITMemoryManager (MM) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateGDBRegistrationListener () -> LLVMJITEventListenerRef { llvm_sys :: execution_engine :: LLVMCreateGDBRegistrationListener () } # [no_mangle] pub unsafe extern "C" fn LLVMCreateIntelJITEventListener () -> LLVMJITEventListenerRef { llvm_sys :: execution_engine :: LLVMCreateIntelJITEventListener () } # [no_mangle] pub unsafe extern "C" fn LLVMCreateOProfileJITEventListener () -> LLVMJITEventListenerRef { llvm_sys :: execution_engine :: LLVMCreateOProfileJITEventListener () } # [no_mangle] pub unsafe extern "C" fn LLVMCreatePerfJITEventListener () -> LLVMJITEventListenerRef { llvm_sys :: execution_engine :: LLVMCreatePerfJITEventListener () }