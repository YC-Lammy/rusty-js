# ! [doc = " The LLVM intermediate representation."] use llvm_sys :: prelude :: * ; use llvm_sys :: * ; # [no_mangle] pub unsafe extern "C" fn LLVMShutdown () { llvm_sys :: core :: LLVMShutdown () } # [no_mangle] pub unsafe extern "C" fn LLVMCreateMessage (Message : * const :: libc :: c_char) -> * mut :: libc :: c_char { llvm_sys :: core :: LLVMCreateMessage (Message) } # [no_mangle] pub unsafe extern "C" fn LLVMDisposeMessage (Message : * mut :: libc :: c_char) { llvm_sys :: core :: LLVMDisposeMessage (Message) } # [no_mangle] pub unsafe extern "C" fn LLVMContextCreate () -> LLVMContextRef { llvm_sys :: core :: LLVMContextCreate () } # [no_mangle] pub unsafe extern "C" fn LLVMGetGlobalContext () -> LLVMContextRef { llvm_sys :: core :: LLVMGetGlobalContext () } # [no_mangle] pub unsafe extern "C" fn LLVMContextSetDiagnosticHandler (C : LLVMContextRef , Handler : LLVMDiagnosticHandler , DiagnosticContext : * mut :: libc :: c_void ,) { llvm_sys :: core :: LLVMContextSetDiagnosticHandler (C , Handler , DiagnosticContext) } # [doc = " Get the diagnostic handler of this context."] # [no_mangle] pub unsafe extern "C" fn LLVMContextGetDiagnosticHandler (C : LLVMContextRef ,) -> LLVMDiagnosticHandler { llvm_sys :: core :: LLVMContextGetDiagnosticHandler (C) } # [doc = " Get the diagnostic context of this context."] # [no_mangle] pub unsafe extern "C" fn LLVMContextGetDiagnosticContext (C : LLVMContextRef) -> * mut :: libc :: c_void { llvm_sys :: core :: LLVMContextGetDiagnosticContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMContextSetYieldCallback (C : LLVMContextRef , Callback : LLVMYieldCallback , OpaqueHandle : * mut :: libc :: c_void ,) { llvm_sys :: core :: LLVMContextSetYieldCallback (C , Callback , OpaqueHandle) } # [no_mangle] pub unsafe extern "C" fn LLVMContextShouldDiscardValueNames (C : LLVMContextRef) -> LLVMBool { llvm_sys :: core :: LLVMContextShouldDiscardValueNames (C) } # [no_mangle] pub unsafe extern "C" fn LLVMContextSetDiscardValueNames (C : LLVMContextRef , Discard : LLVMBool) { llvm_sys :: core :: LLVMContextSetDiscardValueNames (C , Discard) } # [no_mangle] pub unsafe extern "C" fn LLVMContextDispose (C : LLVMContextRef) { llvm_sys :: core :: LLVMContextDispose (C) } # [no_mangle] pub unsafe extern "C" fn LLVMGetDiagInfoDescription (DI : LLVMDiagnosticInfoRef ,) -> * mut :: libc :: c_char { llvm_sys :: core :: LLVMGetDiagInfoDescription (DI) } # [no_mangle] pub unsafe extern "C" fn LLVMGetDiagInfoSeverity (DI : LLVMDiagnosticInfoRef ,) -> LLVMDiagnosticSeverity { llvm_sys :: core :: LLVMGetDiagInfoSeverity (DI) } # [no_mangle] pub unsafe extern "C" fn LLVMGetMDKindIDInContext (C : LLVMContextRef , Name : * const :: libc :: c_char , SLen : :: libc :: c_uint ,) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetMDKindIDInContext (C , Name , SLen) } # [no_mangle] pub unsafe extern "C" fn LLVMGetMDKindID (Name : * const :: libc :: c_char , SLen : :: libc :: c_uint ,) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetMDKindID (Name , SLen) } # [doc = " Return a unique id given the name of an enum attribute, or 0 if no attribute"] # [doc = " by that name exists."] # [doc = ""] # [doc = " See http://llvm.org/docs/LangRef.html#parameter-attributes"] # [doc = " and http://llvm.org/docs/LangRef.html#function-attributes"] # [doc = " for the list of available attributes."] # [doc = ""] # [doc = " Note that attribute names and IDs are not subject to the same stability"] # [doc = " guarantees as this API."] # [no_mangle] pub unsafe extern "C" fn LLVMGetEnumAttributeKindForName (Name : * const :: libc :: c_char , SLen : :: libc :: size_t ,) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetEnumAttributeKindForName (Name , SLen) } # [no_mangle] pub unsafe extern "C" fn LLVMGetLastEnumAttributeKind () -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetLastEnumAttributeKind () } # [doc = " Create an enum attribute."] # [no_mangle] pub unsafe extern "C" fn LLVMCreateEnumAttribute (C : LLVMContextRef , KindID : :: libc :: c_uint , Val : u64 ,) -> LLVMAttributeRef { llvm_sys :: core :: LLVMCreateEnumAttribute (C , KindID , Val) } # [doc = " Get the unique id corresponding to the provided enum attribute."] # [no_mangle] pub unsafe extern "C" fn LLVMGetEnumAttributeKind (A : LLVMAttributeRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetEnumAttributeKind (A) } # [doc = " Get the value of an enum attribute."] # [doc = ""] # [doc = " Returns 0 if none exists."] # [no_mangle] pub unsafe extern "C" fn LLVMGetEnumAttributeValue (A : LLVMAttributeRef) -> u64 { llvm_sys :: core :: LLVMGetEnumAttributeValue (A) } # [doc = " Create a type attribute."] # [no_mangle] pub unsafe extern "C" fn LLVMCreateTypeAttribute (C : LLVMContextRef , KindID : :: libc :: c_uint , type_ref : LLVMTypeRef ,) -> LLVMAttributeRef { llvm_sys :: core :: LLVMCreateTypeAttribute (C , KindID , type_ref) } # [doc = " Get the type attribute's value."] # [no_mangle] pub unsafe extern "C" fn LLVMGetTypeAttributeValue (A : LLVMAttributeRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMGetTypeAttributeValue (A) } # [doc = " Create a string attribute."] # [no_mangle] pub unsafe extern "C" fn LLVMCreateStringAttribute (C : LLVMContextRef , K : * const :: libc :: c_char , KLength : :: libc :: c_uint , V : * const :: libc :: c_char , VLength : :: libc :: c_uint ,) -> LLVMAttributeRef { llvm_sys :: core :: LLVMCreateStringAttribute (C , K , KLength , V , VLength) } # [doc = " Get a string attribute's kind."] # [no_mangle] pub unsafe extern "C" fn LLVMGetStringAttributeKind (A : LLVMAttributeRef , Length : * mut :: libc :: c_uint ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetStringAttributeKind (A , Length) } # [doc = " Get a string attribute's value."] # [no_mangle] pub unsafe extern "C" fn LLVMGetStringAttributeValue (A : LLVMAttributeRef , Length : * mut :: libc :: c_uint ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetStringAttributeValue (A , Length) } # [no_mangle] pub unsafe extern "C" fn LLVMIsEnumAttribute (A : LLVMAttributeRef) -> LLVMBool { llvm_sys :: core :: LLVMIsEnumAttribute (A) } # [no_mangle] pub unsafe extern "C" fn LLVMIsStringAttribute (A : LLVMAttributeRef) -> LLVMBool { llvm_sys :: core :: LLVMIsStringAttribute (A) } # [no_mangle] pub unsafe extern "C" fn LLVMIsTypeAttribute (A : LLVMAttributeRef) -> LLVMBool { llvm_sys :: core :: LLVMIsTypeAttribute (A) } # [doc = " Obtain a Type from a context by its registered name."] # [no_mangle] pub unsafe extern "C" fn LLVMGetTypeByName2 (C : LLVMContextRef , Name : * const :: libc :: c_char ,) -> LLVMTypeRef { llvm_sys :: core :: LLVMGetTypeByName2 (C , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMModuleCreateWithName (ModuleID : * const :: libc :: c_char ,) -> LLVMModuleRef { llvm_sys :: core :: LLVMModuleCreateWithName (ModuleID) } # [no_mangle] pub unsafe extern "C" fn LLVMModuleCreateWithNameInContext (ModuleID : * const :: libc :: c_char , C : LLVMContextRef ,) -> LLVMModuleRef { llvm_sys :: core :: LLVMModuleCreateWithNameInContext (ModuleID , C) } # [no_mangle] pub unsafe extern "C" fn LLVMCloneModule (M : LLVMModuleRef) -> LLVMModuleRef { llvm_sys :: core :: LLVMCloneModule (M) } # [no_mangle] pub unsafe extern "C" fn LLVMDisposeModule (M : LLVMModuleRef) { llvm_sys :: core :: LLVMDisposeModule (M) } # [doc = " Get the identifier of a module."] # [doc = ""] # [doc = " `Len` is written to contains the length of the returned string."] # [no_mangle] pub unsafe extern "C" fn LLVMGetModuleIdentifier (M : LLVMModuleRef , Len : * mut :: libc :: size_t ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetModuleIdentifier (M , Len) } # [doc = " Set the identifier of a module."] # [doc = ""] # [doc = " `Len` is the length of the string pointed to by `Ident`."] # [no_mangle] pub unsafe extern "C" fn LLVMSetModuleIdentifier (M : LLVMModuleRef , Ident : * const :: libc :: c_char , Len : :: libc :: size_t ,) { llvm_sys :: core :: LLVMSetModuleIdentifier (M , Ident , Len) } # [doc = " Obtain the module's original source file name."] # [doc = ""] # [doc = " Len holds the length of the returned string, returns the original source file name of M."] # [no_mangle] pub unsafe extern "C" fn LLVMGetSourceFileName (M : LLVMModuleRef , Len : * mut :: libc :: size_t ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetSourceFileName (M , Len) } # [doc = " Set the original source file name of a module to a string Name with length Len."] # [no_mangle] pub unsafe extern "C" fn LLVMSetSourceFileName (M : LLVMModuleRef , Name : * const :: libc :: c_char , Len : :: libc :: size_t ,) { llvm_sys :: core :: LLVMSetSourceFileName (M , Name , Len) } # [deprecated (since = "3.9" , note = "Confusingly named. Use LLVMGetDataLayoutStr.")] # [no_mangle] pub unsafe extern "C" fn LLVMGetDataLayout (M : LLVMModuleRef) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetDataLayout (M) } # [doc = " Obtain the data layout for a module."] # [no_mangle] pub unsafe extern "C" fn LLVMGetDataLayoutStr (M : LLVMModuleRef) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetDataLayoutStr (M) } # [no_mangle] pub unsafe extern "C" fn LLVMSetDataLayout (M : LLVMModuleRef , DataLayoutStr : * const :: libc :: c_char) { llvm_sys :: core :: LLVMSetDataLayout (M , DataLayoutStr) } # [no_mangle] pub unsafe extern "C" fn LLVMGetTarget (M : LLVMModuleRef) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetTarget (M) } # [no_mangle] pub unsafe extern "C" fn LLVMSetTarget (M : LLVMModuleRef , Triple : * const :: libc :: c_char) { llvm_sys :: core :: LLVMSetTarget (M , Triple) } # [doc = " Returns the module flags as an array of flag-key-value triples.  The caller is responsible for freeing this array by calling LLVMDisposeModuleFlagsMetadata."] # [no_mangle] pub unsafe extern "C" fn LLVMCopyModuleFlagsMetadata (M : LLVMModuleRef , Len : * mut :: libc :: size_t ,) -> * mut LLVMModuleFlagEntry { llvm_sys :: core :: LLVMCopyModuleFlagsMetadata (M , Len) } # [doc = " Destroys module flags metadata entries."] # [no_mangle] pub unsafe extern "C" fn LLVMDisposeModuleFlagsMetadata (Entries : * mut LLVMModuleFlagEntry) { llvm_sys :: core :: LLVMDisposeModuleFlagsMetadata (Entries) } # [doc = " Returns the flag behavior for a module flag entry at a specific index."] # [no_mangle] pub unsafe extern "C" fn LLVMModuleFlagEntriesGetFlagBehavior (Entries : * mut LLVMModuleFlagEntry , Index : :: libc :: c_uint ,) -> LLVMModuleFlagBehavior { llvm_sys :: core :: LLVMModuleFlagEntriesGetFlagBehavior (Entries , Index) } # [doc = " Returns the key for a module flag entry at a specific index."] # [no_mangle] pub unsafe extern "C" fn LLVMModuleFlagEntriesGetKey (Entries : * mut LLVMModuleFlagEntry , Index : :: libc :: c_uint , Len : * mut :: libc :: size_t ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMModuleFlagEntriesGetKey (Entries , Index , Len) } # [doc = " Returns the metadata for a module flag entry at a specific index."] # [no_mangle] pub unsafe extern "C" fn LLVMModuleFlagEntriesGetMetadata (Entries : * mut LLVMModuleFlagEntry , Index : :: libc :: c_uint ,) -> LLVMMetadataRef { llvm_sys :: core :: LLVMModuleFlagEntriesGetMetadata (Entries , Index) } # [doc = " Add a module-level flag to the module-level flags metadata if it doesn't already exist."] # [no_mangle] pub unsafe extern "C" fn LLVMGetModuleFlag (M : LLVMModuleRef , Key : * const :: libc :: c_char , KeyLen : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: core :: LLVMGetModuleFlag (M , Key , KeyLen) } # [doc = " Add a module-level flag to the module-level flags metadata if it doesn't already exist."] # [no_mangle] pub unsafe extern "C" fn LLVMAddModuleFlag (M : LLVMModuleRef , Behavior : LLVMModuleFlagBehavior , Key : * const :: libc :: c_char , KeyLen : :: libc :: size_t , Val : LLVMMetadataRef ,) { llvm_sys :: core :: LLVMAddModuleFlag (M , Behavior , Key , KeyLen , Val) } # [no_mangle] pub unsafe extern "C" fn LLVMDumpModule (M : LLVMModuleRef) { llvm_sys :: core :: LLVMDumpModule (M) } # [no_mangle] pub unsafe extern "C" fn LLVMPrintModuleToFile (M : LLVMModuleRef , Filename : * const :: libc :: c_char , ErrorMessage : * mut * mut :: libc :: c_char ,) -> LLVMBool { llvm_sys :: core :: LLVMPrintModuleToFile (M , Filename , ErrorMessage) } # [no_mangle] pub unsafe extern "C" fn LLVMPrintModuleToString (M : LLVMModuleRef) -> * mut :: libc :: c_char { llvm_sys :: core :: LLVMPrintModuleToString (M) } # [no_mangle] pub unsafe extern "C" fn LLVMGetModuleInlineAsm (M : LLVMModuleRef , Len : * mut :: libc :: size_t ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetModuleInlineAsm (M , Len) } # [deprecated (since = "7.0" , note = "Use LLVMSetModuleInlineAsm2 instead")] # [no_mangle] pub unsafe extern "C" fn LLVMSetModuleInlineAsm (M : LLVMModuleRef , Asm : * const :: libc :: c_char) { llvm_sys :: core :: LLVMSetModuleInlineAsm (M , Asm) } # [no_mangle] pub unsafe extern "C" fn LLVMSetModuleInlineAsm2 (M : LLVMModuleRef , Asm : * const :: libc :: c_char , Len : :: libc :: size_t ,) { llvm_sys :: core :: LLVMSetModuleInlineAsm2 (M , Asm , Len) } # [no_mangle] pub unsafe extern "C" fn LLVMAppendModuleInlineAsm (M : LLVMModuleRef , Asm : * const :: libc :: c_char , Len : :: libc :: size_t ,) { llvm_sys :: core :: LLVMAppendModuleInlineAsm (M , Asm , Len) } # [no_mangle] pub unsafe extern "C" fn LLVMGetInlineAsm (Ty : LLVMTypeRef , AsmString : * mut :: libc :: c_char , AsmStringSize : :: libc :: size_t , Constraints : * mut :: libc :: c_char , ConstraintsSize : :: libc :: size_t , HasSideEffects : LLVMBool , IsAlignStack : LLVMBool , Dialect : LLVMInlineAsmDialect , CanThrow : LLVMBool ,) -> LLVMValueRef { llvm_sys :: core :: LLVMGetInlineAsm (Ty , AsmString , AsmStringSize , Constraints , ConstraintsSize , HasSideEffects , IsAlignStack , Dialect , CanThrow) } # [no_mangle] pub unsafe extern "C" fn LLVMGetModuleContext (M : LLVMModuleRef) -> LLVMContextRef { llvm_sys :: core :: LLVMGetModuleContext (M) } # [deprecated (since = "12.0.0" , note = "Use LLVMGetTypeByName2 instead")] # [no_mangle] pub unsafe extern "C" fn LLVMGetTypeByName (M : LLVMModuleRef , Name : * const :: libc :: c_char ,) -> LLVMTypeRef { llvm_sys :: core :: LLVMGetTypeByName (M , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMGetFirstNamedMetadata (M : LLVMModuleRef) -> LLVMNamedMDNodeRef { llvm_sys :: core :: LLVMGetFirstNamedMetadata (M) } # [no_mangle] pub unsafe extern "C" fn LLVMGetLastNamedMetadata (M : LLVMModuleRef) -> LLVMNamedMDNodeRef { llvm_sys :: core :: LLVMGetLastNamedMetadata (M) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNextNamedMetadata (NamedMDNode : LLVMNamedMDNodeRef ,) -> LLVMNamedMDNodeRef { llvm_sys :: core :: LLVMGetNextNamedMetadata (NamedMDNode) } # [no_mangle] pub unsafe extern "C" fn LLVMGetPreviousNamedMetadata (NamedMDNode : LLVMNamedMDNodeRef ,) -> LLVMNamedMDNodeRef { llvm_sys :: core :: LLVMGetPreviousNamedMetadata (NamedMDNode) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNamedMetadata (M : LLVMModuleRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t ,) -> LLVMNamedMDNodeRef { llvm_sys :: core :: LLVMGetNamedMetadata (M , Name , NameLen) } # [no_mangle] pub unsafe extern "C" fn LLVMGetOrInsertNamedMetadata (M : LLVMModuleRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t ,) -> LLVMNamedMDNodeRef { llvm_sys :: core :: LLVMGetOrInsertNamedMetadata (M , Name , NameLen) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNamedMetadataName (NamedMD : LLVMNamedMDNodeRef , NameLen : * const :: libc :: size_t ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetNamedMetadataName (NamedMD , NameLen) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNamedMetadataNumOperands (M : LLVMModuleRef , name : * const :: libc :: c_char ,) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetNamedMetadataNumOperands (M , name) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNamedMetadataOperands (M : LLVMModuleRef , name : * const :: libc :: c_char , Dest : * mut LLVMValueRef ,) { llvm_sys :: core :: LLVMGetNamedMetadataOperands (M , name , Dest) } # [no_mangle] pub unsafe extern "C" fn LLVMAddNamedMetadataOperand (M : LLVMModuleRef , name : * const :: libc :: c_char , Val : LLVMValueRef ,) { llvm_sys :: core :: LLVMAddNamedMetadataOperand (M , name , Val) } # [no_mangle] pub unsafe extern "C" fn LLVMGetDebugLocDirectory (Val : LLVMValueRef , Length : * mut :: libc :: c_uint ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetDebugLocDirectory (Val , Length) } # [no_mangle] pub unsafe extern "C" fn LLVMGetDebugLocFilename (Val : LLVMValueRef , Length : * mut :: libc :: c_uint ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetDebugLocFilename (Val , Length) } # [no_mangle] pub unsafe extern "C" fn LLVMGetDebugLocLine (Val : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetDebugLocLine (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMGetDebugLocColumn (Val : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetDebugLocColumn (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMAddFunction (M : LLVMModuleRef , Name : * const :: libc :: c_char , FunctionTy : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMAddFunction (M , Name , FunctionTy) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNamedFunction (M : LLVMModuleRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMGetNamedFunction (M , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMGetFirstFunction (M : LLVMModuleRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetFirstFunction (M) } # [no_mangle] pub unsafe extern "C" fn LLVMGetLastFunction (M : LLVMModuleRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetLastFunction (M) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNextFunction (Fn : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetNextFunction (Fn) } # [no_mangle] pub unsafe extern "C" fn LLVMGetPreviousFunction (Fn : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetPreviousFunction (Fn) } # [no_mangle] pub unsafe extern "C" fn LLVMGetTypeKind (Ty : LLVMTypeRef) -> LLVMTypeKind { llvm_sys :: core :: LLVMGetTypeKind (Ty) } # [no_mangle] pub unsafe extern "C" fn LLVMTypeIsSized (Ty : LLVMTypeRef) -> LLVMBool { llvm_sys :: core :: LLVMTypeIsSized (Ty) } # [no_mangle] pub unsafe extern "C" fn LLVMGetTypeContext (Ty : LLVMTypeRef) -> LLVMContextRef { llvm_sys :: core :: LLVMGetTypeContext (Ty) } # [no_mangle] pub unsafe extern "C" fn LLVMDumpType (Val : LLVMTypeRef) { llvm_sys :: core :: LLVMDumpType (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMPrintTypeToString (Val : LLVMTypeRef) -> * mut :: libc :: c_char { llvm_sys :: core :: LLVMPrintTypeToString (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMInt1TypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMInt1TypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMInt8TypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMInt8TypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMInt16TypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMInt16TypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMInt32TypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMInt32TypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMInt64TypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMInt64TypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMInt128TypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMInt128TypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMIntTypeInContext (C : LLVMContextRef , NumBits : :: libc :: c_uint ,) -> LLVMTypeRef { llvm_sys :: core :: LLVMIntTypeInContext (C , NumBits) } # [no_mangle] pub unsafe extern "C" fn LLVMInt1Type () -> LLVMTypeRef { llvm_sys :: core :: LLVMInt1Type () } # [no_mangle] pub unsafe extern "C" fn LLVMInt8Type () -> LLVMTypeRef { llvm_sys :: core :: LLVMInt8Type () } # [no_mangle] pub unsafe extern "C" fn LLVMInt16Type () -> LLVMTypeRef { llvm_sys :: core :: LLVMInt16Type () } # [no_mangle] pub unsafe extern "C" fn LLVMInt32Type () -> LLVMTypeRef { llvm_sys :: core :: LLVMInt32Type () } # [no_mangle] pub unsafe extern "C" fn LLVMInt64Type () -> LLVMTypeRef { llvm_sys :: core :: LLVMInt64Type () } # [no_mangle] pub unsafe extern "C" fn LLVMInt128Type () -> LLVMTypeRef { llvm_sys :: core :: LLVMInt128Type () } # [no_mangle] pub unsafe extern "C" fn LLVMIntType (NumBits : :: libc :: c_uint) -> LLVMTypeRef { llvm_sys :: core :: LLVMIntType (NumBits) } # [no_mangle] pub unsafe extern "C" fn LLVMGetIntTypeWidth (IntegerTy : LLVMTypeRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetIntTypeWidth (IntegerTy) } # [no_mangle] pub unsafe extern "C" fn LLVMHalfTypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMHalfTypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMBFloatTypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMBFloatTypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMFloatTypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMFloatTypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMDoubleTypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMDoubleTypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMX86FP80TypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMX86FP80TypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMFP128TypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMFP128TypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMPPCFP128TypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMPPCFP128TypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMHalfType () -> LLVMTypeRef { llvm_sys :: core :: LLVMHalfType () } # [no_mangle] pub unsafe extern "C" fn LLVMBFloatType () -> LLVMTypeRef { llvm_sys :: core :: LLVMBFloatType () } # [no_mangle] pub unsafe extern "C" fn LLVMFloatType () -> LLVMTypeRef { llvm_sys :: core :: LLVMFloatType () } # [no_mangle] pub unsafe extern "C" fn LLVMDoubleType () -> LLVMTypeRef { llvm_sys :: core :: LLVMDoubleType () } # [no_mangle] pub unsafe extern "C" fn LLVMX86FP80Type () -> LLVMTypeRef { llvm_sys :: core :: LLVMX86FP80Type () } # [no_mangle] pub unsafe extern "C" fn LLVMFP128Type () -> LLVMTypeRef { llvm_sys :: core :: LLVMFP128Type () } # [no_mangle] pub unsafe extern "C" fn LLVMPPCFP128Type () -> LLVMTypeRef { llvm_sys :: core :: LLVMPPCFP128Type () } # [no_mangle] pub unsafe extern "C" fn LLVMFunctionType (ReturnType : LLVMTypeRef , ParamTypes : * mut LLVMTypeRef , ParamCount : :: libc :: c_uint , IsVarArg : LLVMBool ,) -> LLVMTypeRef { llvm_sys :: core :: LLVMFunctionType (ReturnType , ParamTypes , ParamCount , IsVarArg) } # [no_mangle] pub unsafe extern "C" fn LLVMIsFunctionVarArg (FunctionTy : LLVMTypeRef) -> LLVMBool { llvm_sys :: core :: LLVMIsFunctionVarArg (FunctionTy) } # [no_mangle] pub unsafe extern "C" fn LLVMGetReturnType (FunctionTy : LLVMTypeRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMGetReturnType (FunctionTy) } # [no_mangle] pub unsafe extern "C" fn LLVMCountParamTypes (FunctionTy : LLVMTypeRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMCountParamTypes (FunctionTy) } # [no_mangle] pub unsafe extern "C" fn LLVMGetParamTypes (FunctionTy : LLVMTypeRef , Dest : * mut LLVMTypeRef) { llvm_sys :: core :: LLVMGetParamTypes (FunctionTy , Dest) } # [no_mangle] pub unsafe extern "C" fn LLVMStructTypeInContext (C : LLVMContextRef , ElementTypes : * mut LLVMTypeRef , ElementCount : :: libc :: c_uint , Packed : LLVMBool ,) -> LLVMTypeRef { llvm_sys :: core :: LLVMStructTypeInContext (C , ElementTypes , ElementCount , Packed) } # [no_mangle] pub unsafe extern "C" fn LLVMStructType (ElementTypes : * mut LLVMTypeRef , ElementCount : :: libc :: c_uint , Packed : LLVMBool ,) -> LLVMTypeRef { llvm_sys :: core :: LLVMStructType (ElementTypes , ElementCount , Packed) } # [no_mangle] pub unsafe extern "C" fn LLVMStructCreateNamed (C : LLVMContextRef , Name : * const :: libc :: c_char ,) -> LLVMTypeRef { llvm_sys :: core :: LLVMStructCreateNamed (C , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMGetStructName (Ty : LLVMTypeRef) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetStructName (Ty) } # [no_mangle] pub unsafe extern "C" fn LLVMStructSetBody (StructTy : LLVMTypeRef , ElementTypes : * mut LLVMTypeRef , ElementCount : :: libc :: c_uint , Packed : LLVMBool ,) { llvm_sys :: core :: LLVMStructSetBody (StructTy , ElementTypes , ElementCount , Packed) } # [no_mangle] pub unsafe extern "C" fn LLVMCountStructElementTypes (StructTy : LLVMTypeRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMCountStructElementTypes (StructTy) } # [no_mangle] pub unsafe extern "C" fn LLVMGetStructElementTypes (StructTy : LLVMTypeRef , Dest : * mut LLVMTypeRef) { llvm_sys :: core :: LLVMGetStructElementTypes (StructTy , Dest) } # [doc = " Get the type of the element at the given index in a structure."] # [doc = ""] # [doc = " Added in LLVM 3.7."] # [no_mangle] pub unsafe extern "C" fn LLVMStructGetTypeAtIndex (StructTy : LLVMTypeRef , i : :: libc :: c_uint ,) -> LLVMTypeRef { llvm_sys :: core :: LLVMStructGetTypeAtIndex (StructTy , i) } # [doc = " Determine whether a structure is packed."] # [no_mangle] pub unsafe extern "C" fn LLVMIsPackedStruct (StructTy : LLVMTypeRef) -> LLVMBool { llvm_sys :: core :: LLVMIsPackedStruct (StructTy) } # [no_mangle] pub unsafe extern "C" fn LLVMIsOpaqueStruct (StructTy : LLVMTypeRef) -> LLVMBool { llvm_sys :: core :: LLVMIsOpaqueStruct (StructTy) } # [no_mangle] pub unsafe extern "C" fn LLVMIsLiteralStruct (StructTy : LLVMTypeRef) -> LLVMBool { llvm_sys :: core :: LLVMIsLiteralStruct (StructTy) } # [no_mangle] pub unsafe extern "C" fn LLVMGetElementType (Ty : LLVMTypeRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMGetElementType (Ty) } # [doc = " Get the subtypes of the given type."] # [no_mangle] pub unsafe extern "C" fn LLVMGetSubtypes (Tp : LLVMTypeRef , Arr : * mut LLVMTypeRef) { llvm_sys :: core :: LLVMGetSubtypes (Tp , Arr) } # [doc = " Return the number of types in the derived type."] # [no_mangle] pub unsafe extern "C" fn LLVMGetNumContainedTypes (Tp : LLVMTypeRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetNumContainedTypes (Tp) } # [no_mangle] pub unsafe extern "C" fn LLVMArrayType (ElementType : LLVMTypeRef , ElementCount : :: libc :: c_uint ,) -> LLVMTypeRef { llvm_sys :: core :: LLVMArrayType (ElementType , ElementCount) } # [no_mangle] pub unsafe extern "C" fn LLVMGetArrayLength (ArrayTy : LLVMTypeRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetArrayLength (ArrayTy) } # [no_mangle] pub unsafe extern "C" fn LLVMPointerType (ElementType : LLVMTypeRef , AddressSpace : :: libc :: c_uint ,) -> LLVMTypeRef { llvm_sys :: core :: LLVMPointerType (ElementType , AddressSpace) } # [no_mangle] pub unsafe extern "C" fn LLVMGetPointerAddressSpace (PointerTy : LLVMTypeRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetPointerAddressSpace (PointerTy) } # [no_mangle] pub unsafe extern "C" fn LLVMVectorType (ElementType : LLVMTypeRef , ElementCount : :: libc :: c_uint ,) -> LLVMTypeRef { llvm_sys :: core :: LLVMVectorType (ElementType , ElementCount) } # [doc = " Create a vector type that contains a defined type and has a scalable"] # [doc = " number of elements."] # [doc = ""] # [doc = " The created type will exist in the context that its element type"] # [doc = " exists in."] # [no_mangle] pub unsafe extern "C" fn LLVMScalableVectorType (ElementType : LLVMTypeRef , ElementCount : :: libc :: c_uint ,) -> LLVMTypeRef { llvm_sys :: core :: LLVMScalableVectorType (ElementType , ElementCount) } # [doc = " Obtain the (possibly scalable) number of elements in a vector type."] # [no_mangle] pub unsafe extern "C" fn LLVMGetVectorSize (VectorTy : LLVMTypeRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetVectorSize (VectorTy) } # [no_mangle] pub unsafe extern "C" fn LLVMVoidTypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMVoidTypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMLabelTypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMLabelTypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMX86MMXTypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMX86MMXTypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMX86AMXTypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMX86AMXTypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMTokenTypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMTokenTypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMMetadataTypeInContext (C : LLVMContextRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMMetadataTypeInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMVoidType () -> LLVMTypeRef { llvm_sys :: core :: LLVMVoidType () } # [no_mangle] pub unsafe extern "C" fn LLVMLabelType () -> LLVMTypeRef { llvm_sys :: core :: LLVMLabelType () } # [no_mangle] pub unsafe extern "C" fn LLVMX86MMXType () -> LLVMTypeRef { llvm_sys :: core :: LLVMX86MMXType () } # [no_mangle] pub unsafe extern "C" fn LLVMX86AMXType () -> LLVMTypeRef { llvm_sys :: core :: LLVMX86AMXType () } # [no_mangle] pub unsafe extern "C" fn LLVMGetValueKind (Val : LLVMValueRef) -> LLVMValueKind { llvm_sys :: core :: LLVMGetValueKind (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMTypeOf (Val : LLVMValueRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMTypeOf (Val) } # [deprecated (since = "7.0" , note = "Use LLVMGetValueName2 instead")] # [no_mangle] pub unsafe extern "C" fn LLVMGetValueName (Val : LLVMValueRef) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetValueName (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMGetValueName2 (Val : LLVMValueRef , Length : * mut :: libc :: size_t ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetValueName2 (Val , Length) } # [deprecated (since = "7.0" , note = "Use LLVMSetValueName2 instead")] # [no_mangle] pub unsafe extern "C" fn LLVMSetValueName (Val : LLVMValueRef , Name : * const :: libc :: c_char) { llvm_sys :: core :: LLVMSetValueName (Val , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMSetValueName2 (Val : LLVMValueRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t ,) { llvm_sys :: core :: LLVMSetValueName2 (Val , Name , NameLen) } # [no_mangle] pub unsafe extern "C" fn LLVMDumpValue (Val : LLVMValueRef) { llvm_sys :: core :: LLVMDumpValue (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMPrintValueToString (Val : LLVMValueRef) -> * mut :: libc :: c_char { llvm_sys :: core :: LLVMPrintValueToString (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMReplaceAllUsesWith (OldVal : LLVMValueRef , NewVal : LLVMValueRef) { llvm_sys :: core :: LLVMReplaceAllUsesWith (OldVal , NewVal) } # [doc = " Determine whether the specified value instance is constant."] # [no_mangle] pub unsafe extern "C" fn LLVMIsConstant (Val : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMIsConstant (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsUndef (Val : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMIsUndef (Val) } # [doc = " Determine whether a value instance is poisonous."] # [no_mangle] pub unsafe extern "C" fn LLVMIsPoison (Val : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMIsPoison (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAMDNode (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAMDNode (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAMDString (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAMDString (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMGetFirstUse (Val : LLVMValueRef) -> LLVMUseRef { llvm_sys :: core :: LLVMGetFirstUse (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNextUse (U : LLVMUseRef) -> LLVMUseRef { llvm_sys :: core :: LLVMGetNextUse (U) } # [no_mangle] pub unsafe extern "C" fn LLVMGetUser (U : LLVMUseRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetUser (U) } # [no_mangle] pub unsafe extern "C" fn LLVMGetUsedValue (U : LLVMUseRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetUsedValue (U) } # [no_mangle] pub unsafe extern "C" fn LLVMGetOperand (Val : LLVMValueRef , Index : :: libc :: c_uint) -> LLVMValueRef { llvm_sys :: core :: LLVMGetOperand (Val , Index) } # [no_mangle] pub unsafe extern "C" fn LLVMGetOperandUse (Val : LLVMValueRef , Index : :: libc :: c_uint) -> LLVMUseRef { llvm_sys :: core :: LLVMGetOperandUse (Val , Index) } # [no_mangle] pub unsafe extern "C" fn LLVMSetOperand (User : LLVMValueRef , Index : :: libc :: c_uint , Val : LLVMValueRef ,) { llvm_sys :: core :: LLVMSetOperand (User , Index , Val) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNumOperands (Val : LLVMValueRef) -> :: libc :: c_int { llvm_sys :: core :: LLVMGetNumOperands (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMConstNull (Ty : LLVMTypeRef) -> LLVMValueRef { llvm_sys :: core :: LLVMConstNull (Ty) } # [no_mangle] pub unsafe extern "C" fn LLVMConstAllOnes (Ty : LLVMTypeRef) -> LLVMValueRef { llvm_sys :: core :: LLVMConstAllOnes (Ty) } # [no_mangle] pub unsafe extern "C" fn LLVMGetUndef (Ty : LLVMTypeRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetUndef (Ty) } # [doc = " Obtain a constant value referring to a poison value of a type."] # [no_mangle] pub unsafe extern "C" fn LLVMGetPoison (Ty : LLVMTypeRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetPoison (Ty) } # [no_mangle] pub unsafe extern "C" fn LLVMIsNull (Val : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMIsNull (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMConstPointerNull (Ty : LLVMTypeRef) -> LLVMValueRef { llvm_sys :: core :: LLVMConstPointerNull (Ty) } # [no_mangle] pub unsafe extern "C" fn LLVMConstInt (IntTy : LLVMTypeRef , N : :: libc :: c_ulonglong , SignExtend : LLVMBool ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstInt (IntTy , N , SignExtend) } # [no_mangle] pub unsafe extern "C" fn LLVMConstIntOfArbitraryPrecision (IntTy : LLVMTypeRef , NumWords : :: libc :: c_uint , Words : * const u64 ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstIntOfArbitraryPrecision (IntTy , NumWords , Words) } # [no_mangle] pub unsafe extern "C" fn LLVMConstIntOfString (IntTy : LLVMTypeRef , Text : * const :: libc :: c_char , Radix : u8 ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstIntOfString (IntTy , Text , Radix) } # [no_mangle] pub unsafe extern "C" fn LLVMConstIntOfStringAndSize (IntTy : LLVMTypeRef , Text : * const :: libc :: c_char , SLen : :: libc :: c_uint , Radix : u8 ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstIntOfStringAndSize (IntTy , Text , SLen , Radix) } # [no_mangle] pub unsafe extern "C" fn LLVMConstReal (RealTy : LLVMTypeRef , N : :: libc :: c_double) -> LLVMValueRef { llvm_sys :: core :: LLVMConstReal (RealTy , N) } # [no_mangle] pub unsafe extern "C" fn LLVMConstRealOfString (RealTy : LLVMTypeRef , Text : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstRealOfString (RealTy , Text) } # [no_mangle] pub unsafe extern "C" fn LLVMConstRealOfStringAndSize (RealTy : LLVMTypeRef , Text : * const :: libc :: c_char , SLen : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstRealOfStringAndSize (RealTy , Text , SLen) } # [no_mangle] pub unsafe extern "C" fn LLVMConstIntGetZExtValue (ConstantVal : LLVMValueRef ,) -> :: libc :: c_ulonglong { llvm_sys :: core :: LLVMConstIntGetZExtValue (ConstantVal) } # [no_mangle] pub unsafe extern "C" fn LLVMConstIntGetSExtValue (ConstantVal : LLVMValueRef) -> :: libc :: c_longlong { llvm_sys :: core :: LLVMConstIntGetSExtValue (ConstantVal) } # [no_mangle] pub unsafe extern "C" fn LLVMConstRealGetDouble (ConstantVal : LLVMValueRef , losesInfo : * mut LLVMBool ,) -> :: libc :: c_double { llvm_sys :: core :: LLVMConstRealGetDouble (ConstantVal , losesInfo) } # [no_mangle] pub unsafe extern "C" fn LLVMConstStringInContext (C : LLVMContextRef , Str : * const :: libc :: c_char , Length : :: libc :: c_uint , DontNullTerminate : LLVMBool ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstStringInContext (C , Str , Length , DontNullTerminate) } # [no_mangle] pub unsafe extern "C" fn LLVMConstString (Str : * const :: libc :: c_char , Length : :: libc :: c_uint , DontNullTerminate : LLVMBool ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstString (Str , Length , DontNullTerminate) } # [no_mangle] pub unsafe extern "C" fn LLVMIsConstantString (c : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMIsConstantString (c) } # [no_mangle] pub unsafe extern "C" fn LLVMGetAsString (C : LLVMValueRef , Length : * mut :: libc :: size_t ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetAsString (C , Length) } # [no_mangle] pub unsafe extern "C" fn LLVMConstStructInContext (C : LLVMContextRef , ConstantVals : * mut LLVMValueRef , Count : :: libc :: c_uint , Packed : LLVMBool ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstStructInContext (C , ConstantVals , Count , Packed) } # [no_mangle] pub unsafe extern "C" fn LLVMConstStruct (ConstantVals : * mut LLVMValueRef , Count : :: libc :: c_uint , Packed : LLVMBool ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstStruct (ConstantVals , Count , Packed) } # [no_mangle] pub unsafe extern "C" fn LLVMConstArray (ElementTy : LLVMTypeRef , ConstantVals : * mut LLVMValueRef , Length : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstArray (ElementTy , ConstantVals , Length) } # [no_mangle] pub unsafe extern "C" fn LLVMConstNamedStruct (StructTy : LLVMTypeRef , ConstantVals : * mut LLVMValueRef , Count : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstNamedStruct (StructTy , ConstantVals , Count) } # [no_mangle] pub unsafe extern "C" fn LLVMGetElementAsConstant (C : LLVMValueRef , idx : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMGetElementAsConstant (C , idx) } # [no_mangle] pub unsafe extern "C" fn LLVMConstVector (ScalarConstantVals : * mut LLVMValueRef , Size : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstVector (ScalarConstantVals , Size) } # [no_mangle] pub unsafe extern "C" fn LLVMGetConstOpcode (ConstantVal : LLVMValueRef) -> LLVMOpcode { llvm_sys :: core :: LLVMGetConstOpcode (ConstantVal) } # [no_mangle] pub unsafe extern "C" fn LLVMAlignOf (Ty : LLVMTypeRef) -> LLVMValueRef { llvm_sys :: core :: LLVMAlignOf (Ty) } # [no_mangle] pub unsafe extern "C" fn LLVMSizeOf (Ty : LLVMTypeRef) -> LLVMValueRef { llvm_sys :: core :: LLVMSizeOf (Ty) } # [no_mangle] pub unsafe extern "C" fn LLVMConstNeg (ConstantVal : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMConstNeg (ConstantVal) } # [no_mangle] pub unsafe extern "C" fn LLVMConstNSWNeg (ConstantVal : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMConstNSWNeg (ConstantVal) } # [no_mangle] pub unsafe extern "C" fn LLVMConstNUWNeg (ConstantVal : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMConstNUWNeg (ConstantVal) } # [no_mangle] pub unsafe extern "C" fn LLVMConstFNeg (ConstantVal : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMConstFNeg (ConstantVal) } # [no_mangle] pub unsafe extern "C" fn LLVMConstNot (ConstantVal : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMConstNot (ConstantVal) } # [no_mangle] pub unsafe extern "C" fn LLVMConstAdd (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstAdd (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstNSWAdd (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstNSWAdd (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstNUWAdd (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstNUWAdd (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstFAdd (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstFAdd (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstSub (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstSub (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstNSWSub (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstNSWSub (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstNUWSub (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstNUWSub (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstFSub (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstFSub (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstMul (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstMul (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstNSWMul (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstNSWMul (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstNUWMul (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstNUWMul (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstFMul (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstFMul (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstUDiv (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstUDiv (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstExactUDiv (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstExactUDiv (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstSDiv (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstSDiv (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstExactSDiv (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstExactSDiv (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstFDiv (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstFDiv (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstURem (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstURem (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstSRem (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstSRem (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstFRem (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstFRem (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstAnd (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstAnd (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstOr (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstOr (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstXor (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstXor (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstICmp (Predicate : LLVMIntPredicate , LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstICmp (Predicate , LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstFCmp (Predicate : LLVMRealPredicate , LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstFCmp (Predicate , LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstShl (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstShl (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstLShr (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstLShr (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstAShr (LHSConstant : LLVMValueRef , RHSConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstAShr (LHSConstant , RHSConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstGEP (ConstantVal : LLVMValueRef , ConstantIndices : * mut LLVMValueRef , NumIndices : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstGEP (ConstantVal , ConstantIndices , NumIndices) } # [no_mangle] pub unsafe extern "C" fn LLVMConstGEP2 (Ty : LLVMTypeRef , ConstantVal : LLVMValueRef , ConstantIndices : * mut LLVMValueRef , NumIndices : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstGEP2 (Ty , ConstantVal , ConstantIndices , NumIndices) } # [no_mangle] pub unsafe extern "C" fn LLVMConstInBoundsGEP (ConstantVal : LLVMValueRef , ConstantIndices : * mut LLVMValueRef , NumIndices : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstInBoundsGEP (ConstantVal , ConstantIndices , NumIndices) } # [no_mangle] pub unsafe extern "C" fn LLVMConstInBoundsGEP2 (Ty : LLVMTypeRef , ConstantVal : LLVMValueRef , ConstantIndices : * mut LLVMValueRef , NumIndices : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstInBoundsGEP2 (Ty , ConstantVal , ConstantIndices , NumIndices) } # [no_mangle] pub unsafe extern "C" fn LLVMConstTrunc (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstTrunc (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstSExt (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstSExt (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstZExt (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstZExt (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstFPTrunc (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstFPTrunc (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstFPExt (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstFPExt (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstUIToFP (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstUIToFP (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstSIToFP (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstSIToFP (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstFPToUI (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstFPToUI (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstFPToSI (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstFPToSI (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstPtrToInt (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstPtrToInt (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstIntToPtr (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstIntToPtr (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstBitCast (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstBitCast (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstAddrSpaceCast (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstAddrSpaceCast (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstZExtOrBitCast (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstZExtOrBitCast (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstSExtOrBitCast (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstSExtOrBitCast (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstTruncOrBitCast (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstTruncOrBitCast (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstPointerCast (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstPointerCast (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstIntCast (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef , isSigned : LLVMBool ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstIntCast (ConstantVal , ToType , isSigned) } # [no_mangle] pub unsafe extern "C" fn LLVMConstFPCast (ConstantVal : LLVMValueRef , ToType : LLVMTypeRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstFPCast (ConstantVal , ToType) } # [no_mangle] pub unsafe extern "C" fn LLVMConstSelect (ConstantCondition : LLVMValueRef , ConstantIfTrue : LLVMValueRef , ConstantIfFalse : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstSelect (ConstantCondition , ConstantIfTrue , ConstantIfFalse) } # [no_mangle] pub unsafe extern "C" fn LLVMConstExtractElement (VectorConstant : LLVMValueRef , IndexConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstExtractElement (VectorConstant , IndexConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstInsertElement (VectorConstant : LLVMValueRef , ElementValueConstant : LLVMValueRef , IndexConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstInsertElement (VectorConstant , ElementValueConstant , IndexConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstShuffleVector (VectorAConstant : LLVMValueRef , VectorBConstant : LLVMValueRef , MaskConstant : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstShuffleVector (VectorAConstant , VectorBConstant , MaskConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMConstExtractValue (AggConstant : LLVMValueRef , IdxList : * mut :: libc :: c_uint , NumIdx : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstExtractValue (AggConstant , IdxList , NumIdx) } # [no_mangle] pub unsafe extern "C" fn LLVMConstInsertValue (AggConstant : LLVMValueRef , ElementValueConstant : LLVMValueRef , IdxList : * mut :: libc :: c_uint , NumIdx : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstInsertValue (AggConstant , ElementValueConstant , IdxList , NumIdx) } # [deprecated (since = "7.0" , note = "Use LLVMGetInlineAsm instead")] # [no_mangle] pub unsafe extern "C" fn LLVMConstInlineAsm (Ty : LLVMTypeRef , AsmString : * const :: libc :: c_char , Constraints : * const :: libc :: c_char , HasSideEffects : LLVMBool , IsAlignStack : LLVMBool ,) -> LLVMValueRef { llvm_sys :: core :: LLVMConstInlineAsm (Ty , AsmString , Constraints , HasSideEffects , IsAlignStack) } # [no_mangle] pub unsafe extern "C" fn LLVMBlockAddress (F : LLVMValueRef , BB : LLVMBasicBlockRef) -> LLVMValueRef { llvm_sys :: core :: LLVMBlockAddress (F , BB) } # [no_mangle] pub unsafe extern "C" fn LLVMGetGlobalParent (Global : LLVMValueRef) -> LLVMModuleRef { llvm_sys :: core :: LLVMGetGlobalParent (Global) } # [no_mangle] pub unsafe extern "C" fn LLVMIsDeclaration (Global : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMIsDeclaration (Global) } # [no_mangle] pub unsafe extern "C" fn LLVMGetLinkage (Global : LLVMValueRef) -> LLVMLinkage { llvm_sys :: core :: LLVMGetLinkage (Global) } # [no_mangle] pub unsafe extern "C" fn LLVMSetLinkage (Global : LLVMValueRef , Linkage : LLVMLinkage) { llvm_sys :: core :: LLVMSetLinkage (Global , Linkage) } # [no_mangle] pub unsafe extern "C" fn LLVMGetSection (Global : LLVMValueRef) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetSection (Global) } # [no_mangle] pub unsafe extern "C" fn LLVMSetSection (Global : LLVMValueRef , Section : * const :: libc :: c_char) { llvm_sys :: core :: LLVMSetSection (Global , Section) } # [no_mangle] pub unsafe extern "C" fn LLVMGetVisibility (Global : LLVMValueRef) -> LLVMVisibility { llvm_sys :: core :: LLVMGetVisibility (Global) } # [no_mangle] pub unsafe extern "C" fn LLVMSetVisibility (Global : LLVMValueRef , Viz : LLVMVisibility) { llvm_sys :: core :: LLVMSetVisibility (Global , Viz) } # [no_mangle] pub unsafe extern "C" fn LLVMGetDLLStorageClass (Global : LLVMValueRef) -> LLVMDLLStorageClass { llvm_sys :: core :: LLVMGetDLLStorageClass (Global) } # [no_mangle] pub unsafe extern "C" fn LLVMSetDLLStorageClass (Global : LLVMValueRef , Class : LLVMDLLStorageClass) { llvm_sys :: core :: LLVMSetDLLStorageClass (Global , Class) } # [no_mangle] pub unsafe extern "C" fn LLVMGetUnnamedAddress (Global : LLVMValueRef) -> LLVMUnnamedAddr { llvm_sys :: core :: LLVMGetUnnamedAddress (Global) } # [no_mangle] pub unsafe extern "C" fn LLVMSetUnnamedAddress (Global : LLVMValueRef , UnnamedAddr : LLVMUnnamedAddr) { llvm_sys :: core :: LLVMSetUnnamedAddress (Global , UnnamedAddr) } # [no_mangle] pub unsafe extern "C" fn LLVMGlobalGetValueType (Global : LLVMValueRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMGlobalGetValueType (Global) } # [deprecated (since = "7.0" , note = "Use LLVMGetUnnamedAddress instead")] # [no_mangle] pub unsafe extern "C" fn LLVMHasUnnamedAddr (Global : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMHasUnnamedAddr (Global) } # [deprecated (since = "7.0" , note = "Use LLVMSetUnnamedAddress instead")] # [no_mangle] pub unsafe extern "C" fn LLVMSetUnnamedAddr (Global : LLVMValueRef , HasUnnamedAddr : LLVMBool) { llvm_sys :: core :: LLVMSetUnnamedAddr (Global , HasUnnamedAddr) } # [no_mangle] pub unsafe extern "C" fn LLVMGetAlignment (V : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetAlignment (V) } # [no_mangle] pub unsafe extern "C" fn LLVMSetAlignment (V : LLVMValueRef , Bytes : :: libc :: c_uint) { llvm_sys :: core :: LLVMSetAlignment (V , Bytes) } # [no_mangle] pub unsafe extern "C" fn LLVMGlobalSetMetadata (Global : LLVMValueRef , Kind : :: libc :: c_uint , MD : LLVMMetadataRef ,) { llvm_sys :: core :: LLVMGlobalSetMetadata (Global , Kind , MD) } # [no_mangle] pub unsafe extern "C" fn LLVMGlobalEraseMetadata (Global : LLVMValueRef , Kind : :: libc :: c_uint) { llvm_sys :: core :: LLVMGlobalEraseMetadata (Global , Kind) } # [no_mangle] pub unsafe extern "C" fn LLVMGlobalClearMetadata (Global : LLVMValueRef) { llvm_sys :: core :: LLVMGlobalClearMetadata (Global) } # [no_mangle] pub unsafe extern "C" fn LLVMGlobalCopyAllMetadata (Value : LLVMValueRef , NumEntries : * mut :: libc :: size_t ,) -> * mut LLVMValueMetadataEntry { llvm_sys :: core :: LLVMGlobalCopyAllMetadata (Value , NumEntries) } # [no_mangle] pub unsafe extern "C" fn LLVMDisposeValueMetadataEntries (Entries : * mut LLVMValueMetadataEntry) { llvm_sys :: core :: LLVMDisposeValueMetadataEntries (Entries) } # [no_mangle] pub unsafe extern "C" fn LLVMValueMetadataEntriesGetKind (Entries : * mut LLVMValueMetadataEntry , Index : :: libc :: c_uint ,) -> :: libc :: c_uint { llvm_sys :: core :: LLVMValueMetadataEntriesGetKind (Entries , Index) } # [no_mangle] pub unsafe extern "C" fn LLVMValueMetadataEntriesGetMetadata (Entries : * mut LLVMValueMetadataEntry , Index : :: libc :: c_uint ,) -> LLVMMetadataRef { llvm_sys :: core :: LLVMValueMetadataEntriesGetMetadata (Entries , Index) } # [no_mangle] pub unsafe extern "C" fn LLVMAddGlobal (M : LLVMModuleRef , Ty : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMAddGlobal (M , Ty , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMAddGlobalInAddressSpace (M : LLVMModuleRef , Ty : LLVMTypeRef , Name : * const :: libc :: c_char , AddressSpace : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMAddGlobalInAddressSpace (M , Ty , Name , AddressSpace) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNamedGlobal (M : LLVMModuleRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMGetNamedGlobal (M , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMGetFirstGlobal (M : LLVMModuleRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetFirstGlobal (M) } # [no_mangle] pub unsafe extern "C" fn LLVMGetLastGlobal (M : LLVMModuleRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetLastGlobal (M) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNextGlobal (GlobalVar : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetNextGlobal (GlobalVar) } # [no_mangle] pub unsafe extern "C" fn LLVMGetPreviousGlobal (GlobalVar : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetPreviousGlobal (GlobalVar) } # [no_mangle] pub unsafe extern "C" fn LLVMDeleteGlobal (GlobalVar : LLVMValueRef) { llvm_sys :: core :: LLVMDeleteGlobal (GlobalVar) } # [no_mangle] pub unsafe extern "C" fn LLVMGetInitializer (GlobalVar : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetInitializer (GlobalVar) } # [no_mangle] pub unsafe extern "C" fn LLVMSetInitializer (GlobalVar : LLVMValueRef , ConstantVal : LLVMValueRef) { llvm_sys :: core :: LLVMSetInitializer (GlobalVar , ConstantVal) } # [no_mangle] pub unsafe extern "C" fn LLVMIsThreadLocal (GlobalVar : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMIsThreadLocal (GlobalVar) } # [no_mangle] pub unsafe extern "C" fn LLVMSetThreadLocal (GlobalVar : LLVMValueRef , IsThreadLocal : LLVMBool) { llvm_sys :: core :: LLVMSetThreadLocal (GlobalVar , IsThreadLocal) } # [no_mangle] pub unsafe extern "C" fn LLVMIsGlobalConstant (GlobalVar : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMIsGlobalConstant (GlobalVar) } # [no_mangle] pub unsafe extern "C" fn LLVMSetGlobalConstant (GlobalVar : LLVMValueRef , IsConstant : LLVMBool) { llvm_sys :: core :: LLVMSetGlobalConstant (GlobalVar , IsConstant) } # [no_mangle] pub unsafe extern "C" fn LLVMGetThreadLocalMode (GlobalVar : LLVMValueRef) -> LLVMThreadLocalMode { llvm_sys :: core :: LLVMGetThreadLocalMode (GlobalVar) } # [no_mangle] pub unsafe extern "C" fn LLVMSetThreadLocalMode (GlobalVar : LLVMValueRef , Mode : LLVMThreadLocalMode ,) { llvm_sys :: core :: LLVMSetThreadLocalMode (GlobalVar , Mode) } # [no_mangle] pub unsafe extern "C" fn LLVMIsExternallyInitialized (GlobalVar : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMIsExternallyInitialized (GlobalVar) } # [no_mangle] pub unsafe extern "C" fn LLVMSetExternallyInitialized (GlobalVar : LLVMValueRef , IsExtInit : LLVMBool ,) { llvm_sys :: core :: LLVMSetExternallyInitialized (GlobalVar , IsExtInit) } # [doc = " Obtain a GlobalAlias value from a Module by its name."] # [doc = ""] # [doc = " The returned value corresponds to a llvm::GlobalAlias value."] # [no_mangle] pub unsafe extern "C" fn LLVMGetNamedGlobalAlias (M : LLVMModuleRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t ,) -> LLVMValueRef { llvm_sys :: core :: LLVMGetNamedGlobalAlias (M , Name , NameLen) } # [doc = " Obtain an iterator to the first GlobalAlias in a Module."] # [no_mangle] pub unsafe extern "C" fn LLVMGetFirstGlobalAlias (M : LLVMModuleRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetFirstGlobalAlias (M) } # [doc = " Obtain an iterator to the last GlobalAlias in a Module."] # [no_mangle] pub unsafe extern "C" fn LLVMGetLastGlobalAlias (M : LLVMModuleRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetLastGlobalAlias (M) } # [doc = " Advance a GlobalAlias iterator to the next GlobalAlias."] # [doc = ""] # [doc = " Returns NULL if the iterator was already at the end and there are no more global aliases."] # [no_mangle] pub unsafe extern "C" fn LLVMGetNextGlobalAlias (GA : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetNextGlobalAlias (GA) } # [doc = " Decrement a GlobalAlias iterator to the previous GlobalAlias."] # [doc = ""] # [doc = " Returns NULL if the iterator was already at the beginning and there are no previous global aliases."] # [no_mangle] pub unsafe extern "C" fn LLVMGetPreviousGlobalAlias (GA : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetPreviousGlobalAlias (GA) } # [doc = " Retrieve the target value of an alias."] # [no_mangle] pub unsafe extern "C" fn LLVMAliasGetAliasee (Alias : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMAliasGetAliasee (Alias) } # [doc = " Set the target value of an alias."] # [no_mangle] pub unsafe extern "C" fn LLVMAliasSetAliasee (Alias : LLVMValueRef , Aliasee : LLVMValueRef) { llvm_sys :: core :: LLVMAliasSetAliasee (Alias , Aliasee) } # [no_mangle] pub unsafe extern "C" fn LLVMAddAlias (M : LLVMModuleRef , Ty : LLVMTypeRef , Aliasee : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMAddAlias (M , Ty , Aliasee , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMDeleteFunction (Fn : LLVMValueRef) { llvm_sys :: core :: LLVMDeleteFunction (Fn) } # [doc = " Check whether the given function has a personality function."] # [no_mangle] pub unsafe extern "C" fn LLVMHasPersonalityFn (Fn : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMHasPersonalityFn (Fn) } # [doc = " Obtain the personality function attached to the function."] # [doc = ""] # [doc = " Added in LLVM 3.7."] # [no_mangle] pub unsafe extern "C" fn LLVMGetPersonalityFn (Fn : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetPersonalityFn (Fn) } # [doc = " Set the personality function attached to the function."] # [doc = ""] # [doc = " Added in LLVM 3.7."] # [no_mangle] pub unsafe extern "C" fn LLVMSetPersonalityFn (Fn : LLVMValueRef , PersonalityFn : LLVMValueRef) { llvm_sys :: core :: LLVMSetPersonalityFn (Fn , PersonalityFn) } # [doc = " Obtain the intrinsic ID number which matches the given function name."] # [no_mangle] pub unsafe extern "C" fn LLVMLookupIntrinsicID (Name : * const :: libc :: c_char , NameLen : :: libc :: size_t ,) -> :: libc :: c_uint { llvm_sys :: core :: LLVMLookupIntrinsicID (Name , NameLen) } # [doc = " Obtain the ID number from a function instance."] # [no_mangle] pub unsafe extern "C" fn LLVMGetIntrinsicID (Fn : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetIntrinsicID (Fn) } # [no_mangle] pub unsafe extern "C" fn LLVMGetIntrinsicDeclaration (Mod : LLVMModuleRef , ID : :: libc :: c_uint , ParamTypes : * mut LLVMTypeRef , ParamCount : :: libc :: size_t ,) -> LLVMValueRef { llvm_sys :: core :: LLVMGetIntrinsicDeclaration (Mod , ID , ParamTypes , ParamCount) } # [no_mangle] pub unsafe extern "C" fn LLVMIntrinsicGetType (Ctx : LLVMContextRef , ID : :: libc :: c_uint , ParamTypes : * mut LLVMTypeRef , ParamCount : :: libc :: size_t ,) -> LLVMTypeRef { llvm_sys :: core :: LLVMIntrinsicGetType (Ctx , ID , ParamTypes , ParamCount) } # [no_mangle] pub unsafe extern "C" fn LLVMIntrinsicGetName (ID : :: libc :: c_uint , NameLength : * mut :: libc :: size_t ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMIntrinsicGetName (ID , NameLength) } # [deprecated = "Use LLVMIntrinsicCopyOverloadedName2 instead."] # [no_mangle] pub unsafe extern "C" fn LLVMIntrinsicCopyOverloadedName (ID : :: libc :: c_uint , ParamTypes : * mut LLVMTypeRef , ParamCount : :: libc :: size_t , NameLength : * mut :: libc :: size_t ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMIntrinsicCopyOverloadedName (ID , ParamTypes , ParamCount , NameLength) } # [no_mangle] pub unsafe extern "C" fn LLVMIntrinsicCopyOverloadedName2 (Mod : LLVMModuleRef , ID : :: libc :: c_uint , ParamTypes : * mut LLVMTypeRef , ParamCount : :: libc :: size_t , NameLength : * mut :: libc :: size_t ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMIntrinsicCopyOverloadedName2 (Mod , ID , ParamTypes , ParamCount , NameLength) } # [no_mangle] pub unsafe extern "C" fn LLVMIntrinsicIsOverloaded (ID : :: libc :: c_uint) -> LLVMBool { llvm_sys :: core :: LLVMIntrinsicIsOverloaded (ID) } # [no_mangle] pub unsafe extern "C" fn LLVMGetFunctionCallConv (Fn : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetFunctionCallConv (Fn) } # [no_mangle] pub unsafe extern "C" fn LLVMSetFunctionCallConv (Fn : LLVMValueRef , CC : :: libc :: c_uint) { llvm_sys :: core :: LLVMSetFunctionCallConv (Fn , CC) } # [no_mangle] pub unsafe extern "C" fn LLVMGetGC (Fn : LLVMValueRef) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetGC (Fn) } # [no_mangle] pub unsafe extern "C" fn LLVMSetGC (Fn : LLVMValueRef , Name : * const :: libc :: c_char) { llvm_sys :: core :: LLVMSetGC (Fn , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMAddAttributeAtIndex (F : LLVMValueRef , Idx : LLVMAttributeIndex , A : LLVMAttributeRef ,) { llvm_sys :: core :: LLVMAddAttributeAtIndex (F , Idx , A) } # [no_mangle] pub unsafe extern "C" fn LLVMGetAttributeCountAtIndex (F : LLVMValueRef , Idx : LLVMAttributeIndex ,) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetAttributeCountAtIndex (F , Idx) } # [no_mangle] pub unsafe extern "C" fn LLVMGetAttributesAtIndex (F : LLVMValueRef , Idx : LLVMAttributeIndex , Attrs : * mut LLVMAttributeRef ,) { llvm_sys :: core :: LLVMGetAttributesAtIndex (F , Idx , Attrs) } # [no_mangle] pub unsafe extern "C" fn LLVMGetEnumAttributeAtIndex (F : LLVMValueRef , Idx : LLVMAttributeIndex , KindID : :: libc :: c_uint ,) -> LLVMAttributeRef { llvm_sys :: core :: LLVMGetEnumAttributeAtIndex (F , Idx , KindID) } # [no_mangle] pub unsafe extern "C" fn LLVMGetStringAttributeAtIndex (F : LLVMValueRef , Idx : LLVMAttributeIndex , K : * const :: libc :: c_char , KLen : :: libc :: c_uint ,) -> LLVMAttributeRef { llvm_sys :: core :: LLVMGetStringAttributeAtIndex (F , Idx , K , KLen) } # [no_mangle] pub unsafe extern "C" fn LLVMRemoveEnumAttributeAtIndex (F : LLVMValueRef , Idx : LLVMAttributeIndex , KindID : :: libc :: c_uint ,) { llvm_sys :: core :: LLVMRemoveEnumAttributeAtIndex (F , Idx , KindID) } # [no_mangle] pub unsafe extern "C" fn LLVMRemoveStringAttributeAtIndex (F : LLVMValueRef , Idx : LLVMAttributeIndex , K : * const :: libc :: c_char , KLen : :: libc :: c_uint ,) { llvm_sys :: core :: LLVMRemoveStringAttributeAtIndex (F , Idx , K , KLen) } # [no_mangle] pub unsafe extern "C" fn LLVMAddTargetDependentFunctionAttr (Fn : LLVMValueRef , A : * const :: libc :: c_char , V : * const :: libc :: c_char ,) { llvm_sys :: core :: LLVMAddTargetDependentFunctionAttr (Fn , A , V) } # [no_mangle] pub unsafe extern "C" fn LLVMCountParams (Fn : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMCountParams (Fn) } # [no_mangle] pub unsafe extern "C" fn LLVMGetParams (Fn : LLVMValueRef , Params : * mut LLVMValueRef) { llvm_sys :: core :: LLVMGetParams (Fn , Params) } # [no_mangle] pub unsafe extern "C" fn LLVMGetParam (Fn : LLVMValueRef , Index : :: libc :: c_uint) -> LLVMValueRef { llvm_sys :: core :: LLVMGetParam (Fn , Index) } # [no_mangle] pub unsafe extern "C" fn LLVMGetParamParent (Inst : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetParamParent (Inst) } # [no_mangle] pub unsafe extern "C" fn LLVMGetFirstParam (Fn : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetFirstParam (Fn) } # [no_mangle] pub unsafe extern "C" fn LLVMGetLastParam (Fn : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetLastParam (Fn) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNextParam (Arg : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetNextParam (Arg) } # [no_mangle] pub unsafe extern "C" fn LLVMGetPreviousParam (Arg : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetPreviousParam (Arg) } # [no_mangle] pub unsafe extern "C" fn LLVMSetParamAlignment (Arg : LLVMValueRef , Align : :: libc :: c_uint) { llvm_sys :: core :: LLVMSetParamAlignment (Arg , Align) } # [deprecated (since = "LLVM 9.0" , note = "Use LLVMMDStringInContext2 instead.")] # [no_mangle] pub unsafe extern "C" fn LLVMMDStringInContext (C : LLVMContextRef , Str : * const :: libc :: c_char , SLen : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMMDStringInContext (C , Str , SLen) } # [deprecated (since = "LLVM 9.0" , note = "Use LLVMMDStringInContext2 instead.")] # [no_mangle] pub unsafe extern "C" fn LLVMMDString (Str : * const :: libc :: c_char , SLen : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMMDString (Str , SLen) } # [deprecated (since = "LLVM 9.0" , note = "Use LLVMMDNodeInContext2 instead.")] # [no_mangle] pub unsafe extern "C" fn LLVMMDNodeInContext (C : LLVMContextRef , Vals : * mut LLVMValueRef , Count : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMMDNodeInContext (C , Vals , Count) } # [deprecated (since = "LLVM 9.0" , note = "Use LLVMMDNodeInContext2 instead.")] # [no_mangle] pub unsafe extern "C" fn LLVMMDNode (Vals : * mut LLVMValueRef , Count : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMMDNode (Vals , Count) } # [doc = " Add a global indirect function to a module under a specified name."] # [no_mangle] pub unsafe extern "C" fn LLVMAddGlobalIFunc (M : LLVMModuleRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , Ty : LLVMTypeRef , AddrSpace : :: libc :: c_uint , Resolver : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMAddGlobalIFunc (M , Name , NameLen , Ty , AddrSpace , Resolver) } # [doc = " Obtain a GlobalIFunc value from a Module by its name."] # [no_mangle] pub unsafe extern "C" fn LLVMGetNamedGlobalIFunc (M : LLVMModuleRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t ,) -> LLVMValueRef { llvm_sys :: core :: LLVMGetNamedGlobalIFunc (M , Name , NameLen) } # [doc = " Obtain an iterator to the first GlobalIFunc in a Module."] # [no_mangle] pub unsafe extern "C" fn LLVMGetFirstGlobalIFunc (M : LLVMModuleRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetFirstGlobalIFunc (M) } # [doc = " Obtain an iterator to the last GlobalIFunc in a Module."] # [no_mangle] pub unsafe extern "C" fn LLVMGetLastGlobalIFunc (M : LLVMModuleRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetLastGlobalIFunc (M) } # [doc = " Advance a GlobalIFunc iterator to the next GlobalIFunc."] # [no_mangle] pub unsafe extern "C" fn LLVMGetNextGlobalIFunc (IFunc : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetNextGlobalIFunc (IFunc) } # [doc = " Decrement a GlobalIFunc iterator to the previous GlobalIFunc."] # [no_mangle] pub unsafe extern "C" fn LLVMGetPreviousGlobalIFunc (IFunc : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetPreviousGlobalIFunc (IFunc) } # [doc = " Retrieves the resolver function associated with this indirect function, or"] # [doc = " NULL if it doesn't not exist."] # [no_mangle] pub unsafe extern "C" fn LLVMGetGlobalIFuncResolver (IFunc : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetGlobalIFuncResolver (IFunc) } # [doc = " Sets the resolver function associated with this indirect function."] # [no_mangle] pub unsafe extern "C" fn LLVMSetGlobalIFuncResolver (IFunc : LLVMValueRef , Resolver : LLVMValueRef) { llvm_sys :: core :: LLVMSetGlobalIFuncResolver (IFunc , Resolver) } # [doc = " Remove a global indirect function from its parent module and delete it."] # [no_mangle] pub unsafe extern "C" fn LLVMEraseGlobalIFunc (IFunc : LLVMValueRef) { llvm_sys :: core :: LLVMEraseGlobalIFunc (IFunc) } # [doc = " Remove a global indirect function from its parent module."] # [no_mangle] pub unsafe extern "C" fn LLVMRemoveGlobalIFunc (IFunc : LLVMValueRef) { llvm_sys :: core :: LLVMRemoveGlobalIFunc (IFunc) } # [doc = " Create an MDString value from a given string value."] # [no_mangle] pub unsafe extern "C" fn LLVMMDStringInContext2 (C : LLVMContextRef , Str : * const :: libc :: c_char , SLen : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: core :: LLVMMDStringInContext2 (C , Str , SLen) } # [doc = " Create an MDNode value with the given array of operands."] # [no_mangle] pub unsafe extern "C" fn LLVMMDNodeInContext2 (C : LLVMContextRef , MDs : * mut LLVMMetadataRef , Count : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: core :: LLVMMDNodeInContext2 (C , MDs , Count) } # [doc = " Obtain Metadata as a Value."] # [no_mangle] pub unsafe extern "C" fn LLVMMetadataAsValue (C : LLVMContextRef , MD : LLVMMetadataRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMMetadataAsValue (C , MD) } # [doc = " Obtain a Value as Metadata."] # [no_mangle] pub unsafe extern "C" fn LLVMValueAsMetadata (Val : LLVMValueRef) -> LLVMMetadataRef { llvm_sys :: core :: LLVMValueAsMetadata (Val) } # [doc = " Obtain the underlying string from a MDString value."] # [doc = ""] # [doc = " `Len` is written to contain the length of the returned string."] # [no_mangle] pub unsafe extern "C" fn LLVMGetMDString (V : LLVMValueRef , Len : * mut :: libc :: c_uint ,) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetMDString (V , Len) } # [no_mangle] pub unsafe extern "C" fn LLVMGetMDNodeNumOperands (V : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetMDNodeNumOperands (V) } # [no_mangle] pub unsafe extern "C" fn LLVMGetMDNodeOperands (V : LLVMValueRef , Dest : * mut LLVMValueRef) { llvm_sys :: core :: LLVMGetMDNodeOperands (V , Dest) } # [no_mangle] pub unsafe extern "C" fn LLVMBasicBlockAsValue (BB : LLVMBasicBlockRef) -> LLVMValueRef { llvm_sys :: core :: LLVMBasicBlockAsValue (BB) } # [no_mangle] pub unsafe extern "C" fn LLVMValueIsBasicBlock (Val : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMValueIsBasicBlock (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMValueAsBasicBlock (Val : LLVMValueRef) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMValueAsBasicBlock (Val) } # [doc = " Get the string name of a basic block."] # [no_mangle] pub unsafe extern "C" fn LLVMGetBasicBlockName (BB : LLVMBasicBlockRef) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetBasicBlockName (BB) } # [no_mangle] pub unsafe extern "C" fn LLVMGetBasicBlockParent (BB : LLVMBasicBlockRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetBasicBlockParent (BB) } # [no_mangle] pub unsafe extern "C" fn LLVMGetBasicBlockTerminator (BB : LLVMBasicBlockRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetBasicBlockTerminator (BB) } # [no_mangle] pub unsafe extern "C" fn LLVMCountBasicBlocks (Fn : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMCountBasicBlocks (Fn) } # [no_mangle] pub unsafe extern "C" fn LLVMGetBasicBlocks (Fn : LLVMValueRef , BasicBlocks : * mut LLVMBasicBlockRef) { llvm_sys :: core :: LLVMGetBasicBlocks (Fn , BasicBlocks) } # [no_mangle] pub unsafe extern "C" fn LLVMGetFirstBasicBlock (Fn : LLVMValueRef) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMGetFirstBasicBlock (Fn) } # [no_mangle] pub unsafe extern "C" fn LLVMGetLastBasicBlock (Fn : LLVMValueRef) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMGetLastBasicBlock (Fn) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNextBasicBlock (BB : LLVMBasicBlockRef) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMGetNextBasicBlock (BB) } # [no_mangle] pub unsafe extern "C" fn LLVMGetPreviousBasicBlock (BB : LLVMBasicBlockRef) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMGetPreviousBasicBlock (BB) } # [no_mangle] pub unsafe extern "C" fn LLVMGetEntryBasicBlock (Fn : LLVMValueRef) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMGetEntryBasicBlock (Fn) } # [doc = " Insert the given basic block after the insertion point of the given builder."] # [no_mangle] pub unsafe extern "C" fn LLVMInsertExistingBasicBlockAfterInsertBlock (Builder : LLVMBuilderRef , BB : LLVMBasicBlockRef ,) { llvm_sys :: core :: LLVMInsertExistingBasicBlockAfterInsertBlock (Builder , BB) } # [doc = " Append the given basic block to the basic block list of the given function."] # [no_mangle] pub unsafe extern "C" fn LLVMAppendExistingBasicBlock (Fn : LLVMValueRef , BB : LLVMBasicBlockRef) { llvm_sys :: core :: LLVMAppendExistingBasicBlock (Fn , BB) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateBasicBlockInContext (C : LLVMContextRef , Name : * const :: libc :: c_char ,) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMCreateBasicBlockInContext (C , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMAppendBasicBlockInContext (C : LLVMContextRef , Fn : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMAppendBasicBlockInContext (C , Fn , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMAppendBasicBlock (Fn : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMAppendBasicBlock (Fn , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMInsertBasicBlockInContext (C : LLVMContextRef , BB : LLVMBasicBlockRef , Name : * const :: libc :: c_char ,) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMInsertBasicBlockInContext (C , BB , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMInsertBasicBlock (InsertBeforeBB : LLVMBasicBlockRef , Name : * const :: libc :: c_char ,) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMInsertBasicBlock (InsertBeforeBB , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMDeleteBasicBlock (BB : LLVMBasicBlockRef) { llvm_sys :: core :: LLVMDeleteBasicBlock (BB) } # [no_mangle] pub unsafe extern "C" fn LLVMRemoveBasicBlockFromParent (BB : LLVMBasicBlockRef) { llvm_sys :: core :: LLVMRemoveBasicBlockFromParent (BB) } # [no_mangle] pub unsafe extern "C" fn LLVMMoveBasicBlockBefore (BB : LLVMBasicBlockRef , MovePos : LLVMBasicBlockRef ,) { llvm_sys :: core :: LLVMMoveBasicBlockBefore (BB , MovePos) } # [no_mangle] pub unsafe extern "C" fn LLVMMoveBasicBlockAfter (BB : LLVMBasicBlockRef , MovePos : LLVMBasicBlockRef ,) { llvm_sys :: core :: LLVMMoveBasicBlockAfter (BB , MovePos) } # [no_mangle] pub unsafe extern "C" fn LLVMGetFirstInstruction (BB : LLVMBasicBlockRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetFirstInstruction (BB) } # [no_mangle] pub unsafe extern "C" fn LLVMGetLastInstruction (BB : LLVMBasicBlockRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetLastInstruction (BB) } # [no_mangle] pub unsafe extern "C" fn LLVMHasMetadata (Val : LLVMValueRef) -> :: libc :: c_int { llvm_sys :: core :: LLVMHasMetadata (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMGetMetadata (Val : LLVMValueRef , KindID : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMGetMetadata (Val , KindID) } # [no_mangle] pub unsafe extern "C" fn LLVMSetMetadata (Val : LLVMValueRef , KindID : :: libc :: c_uint , Node : LLVMValueRef ,) { llvm_sys :: core :: LLVMSetMetadata (Val , KindID , Node) } # [no_mangle] pub unsafe extern "C" fn LLVMInstructionGetAllMetadataOtherThanDebugLoc (Instr : LLVMValueRef , NumEntries : * mut :: libc :: size_t ,) -> * mut LLVMValueMetadataEntry { llvm_sys :: core :: LLVMInstructionGetAllMetadataOtherThanDebugLoc (Instr , NumEntries) } # [no_mangle] pub unsafe extern "C" fn LLVMGetInstructionParent (Inst : LLVMValueRef) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMGetInstructionParent (Inst) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNextInstruction (Inst : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetNextInstruction (Inst) } # [no_mangle] pub unsafe extern "C" fn LLVMGetPreviousInstruction (Inst : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetPreviousInstruction (Inst) } # [doc = " Remove the given instruction from its containing building block but"] # [doc = " kept alive."] # [no_mangle] pub unsafe extern "C" fn LLVMInstructionRemoveFromParent (Inst : LLVMValueRef) { llvm_sys :: core :: LLVMInstructionRemoveFromParent (Inst) } # [doc = " Remove the given instruction from its containing building block and"] # [doc = " delete it."] # [no_mangle] pub unsafe extern "C" fn LLVMInstructionEraseFromParent (Inst : LLVMValueRef) { llvm_sys :: core :: LLVMInstructionEraseFromParent (Inst) } # [no_mangle] pub unsafe extern "C" fn LLVMGetInstructionOpcode (Inst : LLVMValueRef) -> LLVMOpcode { llvm_sys :: core :: LLVMGetInstructionOpcode (Inst) } # [no_mangle] pub unsafe extern "C" fn LLVMGetICmpPredicate (Inst : LLVMValueRef) -> LLVMIntPredicate { llvm_sys :: core :: LLVMGetICmpPredicate (Inst) } # [no_mangle] pub unsafe extern "C" fn LLVMGetFCmpPredicate (Inst : LLVMValueRef) -> LLVMRealPredicate { llvm_sys :: core :: LLVMGetFCmpPredicate (Inst) } # [no_mangle] pub unsafe extern "C" fn LLVMInstructionClone (Inst : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMInstructionClone (Inst) } # [no_mangle] pub unsafe extern "C" fn LLVMIsATerminatorInst (Inst : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsATerminatorInst (Inst) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNumArgOperands (Instr : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetNumArgOperands (Instr) } # [no_mangle] pub unsafe extern "C" fn LLVMSetInstructionCallConv (Instr : LLVMValueRef , CC : :: libc :: c_uint) { llvm_sys :: core :: LLVMSetInstructionCallConv (Instr , CC) } # [no_mangle] pub unsafe extern "C" fn LLVMGetInstructionCallConv (Instr : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetInstructionCallConv (Instr) } # [no_mangle] pub unsafe extern "C" fn LLVMSetInstrParamAlignment (Instr : LLVMValueRef , index : :: libc :: c_uint , Align : :: libc :: c_uint ,) { llvm_sys :: core :: LLVMSetInstrParamAlignment (Instr , index , Align) } # [no_mangle] pub unsafe extern "C" fn LLVMAddCallSiteAttribute (C : LLVMValueRef , Idx : LLVMAttributeIndex , A : LLVMAttributeRef ,) { llvm_sys :: core :: LLVMAddCallSiteAttribute (C , Idx , A) } # [no_mangle] pub unsafe extern "C" fn LLVMGetCallSiteAttributeCount (C : LLVMValueRef , Idx : LLVMAttributeIndex ,) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetCallSiteAttributeCount (C , Idx) } # [no_mangle] pub unsafe extern "C" fn LLVMGetCallSiteAttributes (C : LLVMValueRef , Idx : LLVMAttributeIndex , Attrs : * mut LLVMAttributeRef ,) { llvm_sys :: core :: LLVMGetCallSiteAttributes (C , Idx , Attrs) } # [no_mangle] pub unsafe extern "C" fn LLVMGetCallSiteEnumAttribute (C : LLVMValueRef , Idx : LLVMAttributeIndex , KindID : :: libc :: c_uint ,) -> LLVMAttributeRef { llvm_sys :: core :: LLVMGetCallSiteEnumAttribute (C , Idx , KindID) } # [no_mangle] pub unsafe extern "C" fn LLVMGetCallSiteStringAttribute (C : LLVMValueRef , Idx : LLVMAttributeIndex , K : * const :: libc :: c_char , KLen : :: libc :: c_uint ,) -> LLVMAttributeRef { llvm_sys :: core :: LLVMGetCallSiteStringAttribute (C , Idx , K , KLen) } # [no_mangle] pub unsafe extern "C" fn LLVMRemoveCallSiteEnumAttribute (C : LLVMValueRef , Idx : LLVMAttributeIndex , KindID : :: libc :: c_uint ,) { llvm_sys :: core :: LLVMRemoveCallSiteEnumAttribute (C , Idx , KindID) } # [no_mangle] pub unsafe extern "C" fn LLVMRemoveCallSiteStringAttribute (C : LLVMValueRef , Idx : LLVMAttributeIndex , K : * const :: libc :: c_char , KLen : :: libc :: c_uint ,) { llvm_sys :: core :: LLVMRemoveCallSiteStringAttribute (C , Idx , K , KLen) } # [no_mangle] pub unsafe extern "C" fn LLVMGetCalledFunctionType (C : LLVMValueRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMGetCalledFunctionType (C) } # [doc = " Get a pointer to the function invoked by this instruction."] # [doc = ""] # [doc = " The provided value should be a CallInst or InvokeInst."] # [no_mangle] pub unsafe extern "C" fn LLVMGetCalledValue (Instr : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetCalledValue (Instr) } # [doc = " Get whether a call instruction is a tail call."] # [no_mangle] pub unsafe extern "C" fn LLVMIsTailCall (CallInst : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMIsTailCall (CallInst) } # [no_mangle] pub unsafe extern "C" fn LLVMSetTailCall (CallInst : LLVMValueRef , IsTailCall : LLVMBool) { llvm_sys :: core :: LLVMSetTailCall (CallInst , IsTailCall) } # [doc = " Return the normal destination basic block of an invoke instruction."] # [no_mangle] pub unsafe extern "C" fn LLVMGetNormalDest (InvokeInst : LLVMValueRef) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMGetNormalDest (InvokeInst) } # [doc = " Return the unwind destination basic block."] # [no_mangle] pub unsafe extern "C" fn LLVMGetUnwindDest (InvokeInst : LLVMValueRef) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMGetUnwindDest (InvokeInst) } # [doc = " Set the normal destination basic block."] # [no_mangle] pub unsafe extern "C" fn LLVMSetNormalDest (InvokeInst : LLVMValueRef , B : LLVMBasicBlockRef) { llvm_sys :: core :: LLVMSetNormalDest (InvokeInst , B) } # [doc = " Set the unwind destination basic block."] # [no_mangle] pub unsafe extern "C" fn LLVMSetUnwindDest (InvokeInst : LLVMValueRef , B : LLVMBasicBlockRef) { llvm_sys :: core :: LLVMSetUnwindDest (InvokeInst , B) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNumSuccessors (Term : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetNumSuccessors (Term) } # [no_mangle] pub unsafe extern "C" fn LLVMGetSuccessor (Term : LLVMValueRef , i : :: libc :: c_uint ,) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMGetSuccessor (Term , i) } # [no_mangle] pub unsafe extern "C" fn LLVMSetSuccessor (Term : LLVMValueRef , i : :: libc :: c_uint , block : LLVMBasicBlockRef ,) { llvm_sys :: core :: LLVMSetSuccessor (Term , i , block) } # [no_mangle] pub unsafe extern "C" fn LLVMIsConditional (Branch : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMIsConditional (Branch) } # [no_mangle] pub unsafe extern "C" fn LLVMGetCondition (Branch : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetCondition (Branch) } # [no_mangle] pub unsafe extern "C" fn LLVMSetCondition (Branch : LLVMValueRef , Cond : LLVMValueRef) { llvm_sys :: core :: LLVMSetCondition (Branch , Cond) } # [no_mangle] pub unsafe extern "C" fn LLVMGetSwitchDefaultDest (SwitchInstr : LLVMValueRef) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMGetSwitchDefaultDest (SwitchInstr) } # [no_mangle] pub unsafe extern "C" fn LLVMGetAllocatedType (Alloca : LLVMValueRef) -> LLVMTypeRef { llvm_sys :: core :: LLVMGetAllocatedType (Alloca) } # [no_mangle] pub unsafe extern "C" fn LLVMIsInBounds (GEP : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMIsInBounds (GEP) } # [doc = " Set the given GEP instruction to be inbounds or not."] # [no_mangle] pub unsafe extern "C" fn LLVMSetIsInBounds (GEP : LLVMValueRef , InBounds : LLVMBool) { llvm_sys :: core :: LLVMSetIsInBounds (GEP , InBounds) } # [no_mangle] pub unsafe extern "C" fn LLVMAddIncoming (PhiNode : LLVMValueRef , IncomingValues : * mut LLVMValueRef , IncomingBlocks : * mut LLVMBasicBlockRef , Count : :: libc :: c_uint ,) { llvm_sys :: core :: LLVMAddIncoming (PhiNode , IncomingValues , IncomingBlocks , Count) } # [no_mangle] pub unsafe extern "C" fn LLVMCountIncoming (PhiNode : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMCountIncoming (PhiNode) } # [no_mangle] pub unsafe extern "C" fn LLVMGetIncomingValue (PhiNode : LLVMValueRef , Index : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMGetIncomingValue (PhiNode , Index) } # [no_mangle] pub unsafe extern "C" fn LLVMGetIncomingBlock (PhiNode : LLVMValueRef , Index : :: libc :: c_uint ,) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMGetIncomingBlock (PhiNode , Index) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAArgument (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAArgument (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsABasicBlock (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsABasicBlock (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAInlineAsm (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAInlineAsm (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAUser (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAUser (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAConstant (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAConstant (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsABlockAddress (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsABlockAddress (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAConstantAggregateZero (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAConstantAggregateZero (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAConstantArray (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAConstantArray (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAConstantDataSequential (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAConstantDataSequential (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAConstantDataArray (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAConstantDataArray (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAConstantDataVector (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAConstantDataVector (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAConstantExpr (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAConstantExpr (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAConstantFP (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAConstantFP (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAConstantInt (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAConstantInt (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAConstantPointerNull (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAConstantPointerNull (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAConstantStruct (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAConstantStruct (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAConstantTokenNone (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAConstantTokenNone (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAConstantVector (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAConstantVector (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAGlobalValue (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAGlobalValue (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAGlobalAlias (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAGlobalAlias (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAGlobalIFunc (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAGlobalIFunc (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAGlobalObject (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAGlobalObject (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAFunction (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAFunction (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAGlobalVariable (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAGlobalVariable (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAUndefValue (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAUndefValue (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAPoisonValue (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAPoisonValue (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAInstruction (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAInstruction (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAUnaryOperator (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAUnaryOperator (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsABinaryOperator (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsABinaryOperator (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsACallInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsACallInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAIntrinsicInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAIntrinsicInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsADbgInfoIntrinsic (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsADbgInfoIntrinsic (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsADbgVariableIntrinsic (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsADbgVariableIntrinsic (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsADbgDeclareInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsADbgDeclareInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsADbgLabelInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsADbgLabelInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAMemIntrinsic (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAMemIntrinsic (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAMemCpyInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAMemCpyInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAMemMoveInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAMemMoveInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAMemSetInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAMemSetInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsACmpInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsACmpInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAFCmpInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAFCmpInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAICmpInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAICmpInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAExtractElementInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAExtractElementInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAGetElementPtrInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAGetElementPtrInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAInsertElementInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAInsertElementInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAInsertValueInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAInsertValueInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsALandingPadInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsALandingPadInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAPHINode (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAPHINode (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsASelectInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsASelectInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAShuffleVectorInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAShuffleVectorInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAStoreInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAStoreInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsABranchInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsABranchInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAIndirectBrInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAIndirectBrInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAInvokeInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAInvokeInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAReturnInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAReturnInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsASwitchInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsASwitchInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAUnreachableInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAUnreachableInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAResumeInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAResumeInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsACleanupReturnInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsACleanupReturnInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsACatchReturnInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsACatchReturnInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsACatchSwitchInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsACatchSwitchInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsACallBrInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsACallBrInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAFuncletPadInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAFuncletPadInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsACatchPadInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsACatchPadInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsACleanupPadInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsACleanupPadInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAUnaryInstruction (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAUnaryInstruction (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAAllocaInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAAllocaInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsACastInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsACastInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAAddrSpaceCastInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAAddrSpaceCastInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsABitCastInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsABitCastInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAFPExtInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAFPExtInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAFPToSIInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAFPToSIInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAFPToUIInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAFPToUIInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAFPTruncInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAFPTruncInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAIntToPtrInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAIntToPtrInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAPtrToIntInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAPtrToIntInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsASExtInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsASExtInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsASIToFPInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsASIToFPInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsATruncInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsATruncInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAUIToFPInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAUIToFPInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAZExtInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAZExtInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAExtractValueInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAExtractValueInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsALoadInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsALoadInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAVAArgInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAVAArgInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAFreezeInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAFreezeInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAAtomicCmpXchgInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAAtomicCmpXchgInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAAtomicRMWInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAAtomicRMWInst (Val) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAFenceInst (Val : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMIsAFenceInst (Val) } # [doc = " Get the number of indices on an ExtractValue, InsertValue or GEP instruction."] # [no_mangle] pub unsafe extern "C" fn LLVMGetNumIndices (Inst : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetNumIndices (Inst) } # [no_mangle] pub unsafe extern "C" fn LLVMGetIndices (Inst : LLVMValueRef) -> * const :: libc :: c_uint { llvm_sys :: core :: LLVMGetIndices (Inst) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateBuilderInContext (C : LLVMContextRef) -> LLVMBuilderRef { llvm_sys :: core :: LLVMCreateBuilderInContext (C) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateBuilder () -> LLVMBuilderRef { llvm_sys :: core :: LLVMCreateBuilder () } # [no_mangle] pub unsafe extern "C" fn LLVMPositionBuilder (Builder : LLVMBuilderRef , Block : LLVMBasicBlockRef , Instr : LLVMValueRef ,) { llvm_sys :: core :: LLVMPositionBuilder (Builder , Block , Instr) } # [no_mangle] pub unsafe extern "C" fn LLVMPositionBuilderBefore (Builder : LLVMBuilderRef , Instr : LLVMValueRef) { llvm_sys :: core :: LLVMPositionBuilderBefore (Builder , Instr) } # [no_mangle] pub unsafe extern "C" fn LLVMPositionBuilderAtEnd (Builder : LLVMBuilderRef , Block : LLVMBasicBlockRef ,) { llvm_sys :: core :: LLVMPositionBuilderAtEnd (Builder , Block) } # [no_mangle] pub unsafe extern "C" fn LLVMGetInsertBlock (Builder : LLVMBuilderRef) -> LLVMBasicBlockRef { llvm_sys :: core :: LLVMGetInsertBlock (Builder) } # [no_mangle] pub unsafe extern "C" fn LLVMClearInsertionPosition (Builder : LLVMBuilderRef) { llvm_sys :: core :: LLVMClearInsertionPosition (Builder) } # [no_mangle] pub unsafe extern "C" fn LLVMInsertIntoBuilder (Builder : LLVMBuilderRef , Instr : LLVMValueRef) { llvm_sys :: core :: LLVMInsertIntoBuilder (Builder , Instr) } # [no_mangle] pub unsafe extern "C" fn LLVMInsertIntoBuilderWithName (Builder : LLVMBuilderRef , Instr : LLVMValueRef , Name : * const :: libc :: c_char ,) { llvm_sys :: core :: LLVMInsertIntoBuilderWithName (Builder , Instr , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMDisposeBuilder (Builder : LLVMBuilderRef) { llvm_sys :: core :: LLVMDisposeBuilder (Builder) } # [doc = " Get location information used by debugging information."] # [no_mangle] pub unsafe extern "C" fn LLVMGetCurrentDebugLocation2 (Builder : LLVMBuilderRef) -> LLVMMetadataRef { llvm_sys :: core :: LLVMGetCurrentDebugLocation2 (Builder) } # [doc = " Set location information used by debugging information."] # [no_mangle] pub unsafe extern "C" fn LLVMSetCurrentDebugLocation2 (Builder : LLVMBuilderRef , Loc : LLVMMetadataRef ,) { llvm_sys :: core :: LLVMSetCurrentDebugLocation2 (Builder , Loc) } # [doc = " Attempts to set the debug location for the given instruction using the"] # [doc = " current debug location for the given builder.  If the builder has no current"] # [doc = " debug location, this function is a no-op."] # [no_mangle] pub unsafe extern "C" fn LLVMSetInstDebugLocation (Builder : LLVMBuilderRef , Inst : LLVMValueRef) { llvm_sys :: core :: LLVMSetInstDebugLocation (Builder , Inst) } # [doc = " Get the dafult floating-point math metadata for a given builder."] # [no_mangle] pub unsafe extern "C" fn LLVMBuilderGetDefaultFPMathTag (Builder : LLVMBuilderRef ,) -> LLVMMetadataRef { llvm_sys :: core :: LLVMBuilderGetDefaultFPMathTag (Builder) } # [doc = " Set the default floating-point math metadata for the given builder."] # [no_mangle] pub unsafe extern "C" fn LLVMBuilderSetDefaultFPMathTag (Builder : LLVMBuilderRef , FPMathTag : LLVMMetadataRef ,) { llvm_sys :: core :: LLVMBuilderSetDefaultFPMathTag (Builder , FPMathTag) } # [deprecated (since = "LLVM 9.0" , note = "Use LLVMGetCurrentDebugLocation2 instead.")] # [no_mangle] pub unsafe extern "C" fn LLVMSetCurrentDebugLocation (Builder : LLVMBuilderRef , L : LLVMValueRef) { llvm_sys :: core :: LLVMSetCurrentDebugLocation (Builder , L) } # [no_mangle] pub unsafe extern "C" fn LLVMGetCurrentDebugLocation (Builder : LLVMBuilderRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetCurrentDebugLocation (Builder) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildRetVoid (arg1 : LLVMBuilderRef) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildRetVoid (arg1) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildRet (arg1 : LLVMBuilderRef , V : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildRet (arg1 , V) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildAggregateRet (arg1 : LLVMBuilderRef , RetVals : * mut LLVMValueRef , N : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildAggregateRet (arg1 , RetVals , N) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildBr (arg1 : LLVMBuilderRef , Dest : LLVMBasicBlockRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildBr (arg1 , Dest) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildCondBr (arg1 : LLVMBuilderRef , If : LLVMValueRef , Then : LLVMBasicBlockRef , Else : LLVMBasicBlockRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildCondBr (arg1 , If , Then , Else) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildSwitch (arg1 : LLVMBuilderRef , V : LLVMValueRef , Else : LLVMBasicBlockRef , NumCases : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildSwitch (arg1 , V , Else , NumCases) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildIndirectBr (B : LLVMBuilderRef , Addr : LLVMValueRef , NumDests : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildIndirectBr (B , Addr , NumDests) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildInvoke (arg1 : LLVMBuilderRef , Fn : LLVMValueRef , Args : * mut LLVMValueRef , NumArgs : :: libc :: c_uint , Then : LLVMBasicBlockRef , Catch : LLVMBasicBlockRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildInvoke (arg1 , Fn , Args , NumArgs , Then , Catch , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildInvoke2 (arg1 : LLVMBuilderRef , Ty : LLVMTypeRef , Fn : LLVMValueRef , Args : * mut LLVMValueRef , NumArgs : :: libc :: c_uint , Then : LLVMBasicBlockRef , Catch : LLVMBasicBlockRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildInvoke2 (arg1 , Ty , Fn , Args , NumArgs , Then , Catch , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildUnreachable (B : LLVMBuilderRef) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildUnreachable (B) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildResume (B : LLVMBuilderRef , Exn : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildResume (B , Exn) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildLandingPad (B : LLVMBuilderRef , Ty : LLVMTypeRef , PersFn : LLVMValueRef , NumClauses : :: libc :: c_uint , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildLandingPad (B , Ty , PersFn , NumClauses , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildCleanupRet (B : LLVMBuilderRef , CatchPad : LLVMValueRef , BB : LLVMBasicBlockRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildCleanupRet (B , CatchPad , BB) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildCatchRet (B : LLVMBuilderRef , CatchPad : LLVMValueRef , BB : LLVMBasicBlockRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildCatchRet (B , CatchPad , BB) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildCatchPad (B : LLVMBuilderRef , ParentPad : LLVMValueRef , Args : * mut LLVMValueRef , NumArgs : :: libc :: c_uint , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildCatchPad (B , ParentPad , Args , NumArgs , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildCleanupPad (B : LLVMBuilderRef , ParentPad : LLVMValueRef , Args : * mut LLVMValueRef , NumArgs : :: libc :: c_uint , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildCleanupPad (B , ParentPad , Args , NumArgs , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildCatchSwitch (B : LLVMBuilderRef , ParentPad : LLVMValueRef , UnwindBB : LLVMBasicBlockRef , NumHandler : :: libc :: c_uint , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildCatchSwitch (B , ParentPad , UnwindBB , NumHandler , Name) } # [doc = " Add a case to a `switch` instruction"] # [no_mangle] pub unsafe extern "C" fn LLVMAddCase (Switch : LLVMValueRef , OnVal : LLVMValueRef , Dest : LLVMBasicBlockRef ,) { llvm_sys :: core :: LLVMAddCase (Switch , OnVal , Dest) } # [doc = " Add a destination to an `indirectbr` instruction"] # [no_mangle] pub unsafe extern "C" fn LLVMAddDestination (IndirectBr : LLVMValueRef , Dest : LLVMBasicBlockRef) { llvm_sys :: core :: LLVMAddDestination (IndirectBr , Dest) } # [doc = " Get the number of clauses on a landingpad instruction."] # [no_mangle] pub unsafe extern "C" fn LLVMGetNumClauses (LandingPad : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetNumClauses (LandingPad) } # [doc = " Get the value of the clause with the given index on a landingpad instruction."] # [no_mangle] pub unsafe extern "C" fn LLVMGetClause (LandingPad : LLVMValueRef , Idx : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMGetClause (LandingPad , Idx) } # [doc = " Add a catch or filter clause to a `landingpad` instruction"] # [no_mangle] pub unsafe extern "C" fn LLVMAddClause (LandingPad : LLVMValueRef , ClauseVal : LLVMValueRef) { llvm_sys :: core :: LLVMAddClause (LandingPad , ClauseVal) } # [doc = " Get the cleanup flag in a landingpad instruction."] # [no_mangle] pub unsafe extern "C" fn LLVMIsCleanup (LandingPad : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMIsCleanup (LandingPad) } # [doc = " Set the cleanup flag in a `landingpad` instruction."] # [no_mangle] pub unsafe extern "C" fn LLVMSetCleanup (LandingPad : LLVMValueRef , Val : LLVMBool) { llvm_sys :: core :: LLVMSetCleanup (LandingPad , Val) } # [doc = " Add a destination to the catchswitch instruction"] # [no_mangle] pub unsafe extern "C" fn LLVMAddHandler (CatchSwitch : LLVMValueRef , Dest : LLVMBasicBlockRef) { llvm_sys :: core :: LLVMAddHandler (CatchSwitch , Dest) } # [doc = " Get the number of handlers on the catchswitch instruction"] # [no_mangle] pub unsafe extern "C" fn LLVMGetNumHandlers (CatchSwitch : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetNumHandlers (CatchSwitch) } # [doc = " Obtain the basic blocks acting as handlers for a catchswitch instruction."] # [doc = ""] # [doc = " The Handlers parameter should point to a pre-allocated array of LLVMBasicBlockRefs at least LLVMGetNumHandlers() large. On return, the first LLVMGetNumHandlers() entries in the array will be populated with LLVMBasicBlockRef instances."] # [no_mangle] pub unsafe extern "C" fn LLVMGetHandlers (CatchSwitch : LLVMValueRef , Handlers : * mut LLVMBasicBlockRef ,) { llvm_sys :: core :: LLVMGetHandlers (CatchSwitch , Handlers) } # [doc = " Get the number of funcletpad arguments."] # [no_mangle] pub unsafe extern "C" fn LLVMGetArgOperand (Funclet : LLVMValueRef , i : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMGetArgOperand (Funclet , i) } # [doc = " Set a funcletpad argument at the given index."] # [no_mangle] pub unsafe extern "C" fn LLVMSetArgOperand (Funclet : LLVMValueRef , i : :: libc :: c_uint , value : LLVMValueRef ,) { llvm_sys :: core :: LLVMSetArgOperand (Funclet , i , value) } # [doc = " Get the parent catchswitch instruction of a catchpad instruction."] # [doc = ""] # [doc = " This only works on llvm::CatchPadInst instructions."] # [no_mangle] pub unsafe extern "C" fn LLVMGetParentCatchSwitch (CatchPad : LLVMValueRef) -> LLVMValueRef { llvm_sys :: core :: LLVMGetParentCatchSwitch (CatchPad) } # [doc = " Set the parent catchswitch instruction of a catchpad instruction."] # [doc = " This only works on llvm::CatchPadInst instructions."] # [no_mangle] pub unsafe extern "C" fn LLVMSetParentCatchSwitch (CatchPad : LLVMValueRef , CatchSwitch : LLVMValueRef ,) { llvm_sys :: core :: LLVMSetParentCatchSwitch (CatchPad , CatchSwitch) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildAdd (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildAdd (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildNSWAdd (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildNSWAdd (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildNUWAdd (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildNUWAdd (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFAdd (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFAdd (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildSub (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildSub (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildNSWSub (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildNSWSub (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildNUWSub (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildNUWSub (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFSub (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFSub (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildMul (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildMul (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildNSWMul (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildNSWMul (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildNUWMul (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildNUWMul (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFMul (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFMul (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildUDiv (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildUDiv (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildExactUDiv (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildExactUDiv (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildSDiv (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildSDiv (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildExactSDiv (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildExactSDiv (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFDiv (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFDiv (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildURem (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildURem (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildSRem (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildSRem (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFRem (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFRem (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildShl (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildShl (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildLShr (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildLShr (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildAShr (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildAShr (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildAnd (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildAnd (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildOr (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildOr (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildXor (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildXor (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildBinOp (B : LLVMBuilderRef , Op : LLVMOpcode , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildBinOp (B , Op , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildNeg (arg1 : LLVMBuilderRef , V : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildNeg (arg1 , V , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildNSWNeg (B : LLVMBuilderRef , V : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildNSWNeg (B , V , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildNUWNeg (B : LLVMBuilderRef , V : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildNUWNeg (B , V , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFNeg (arg1 : LLVMBuilderRef , V : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFNeg (arg1 , V , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildNot (arg1 : LLVMBuilderRef , V : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildNot (arg1 , V , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildMalloc (arg1 : LLVMBuilderRef , Ty : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildMalloc (arg1 , Ty , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildArrayMalloc (arg1 : LLVMBuilderRef , Ty : LLVMTypeRef , Val : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildArrayMalloc (arg1 , Ty , Val , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildMemSet (B : LLVMBuilderRef , Ptr : LLVMValueRef , Val : LLVMValueRef , Len : LLVMValueRef , Align : :: libc :: c_uint ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildMemSet (B , Ptr , Val , Len , Align) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildMemCpy (B : LLVMBuilderRef , Dst : LLVMValueRef , DstAlign : :: libc :: c_uint , Src : LLVMValueRef , SrcAlign : :: libc :: c_uint , Size : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildMemCpy (B , Dst , DstAlign , Src , SrcAlign , Size) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildMemMove (B : LLVMBuilderRef , Dst : LLVMValueRef , DstAlign : :: libc :: c_uint , Src : LLVMValueRef , SrcAlign : :: libc :: c_uint , Size : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildMemMove (B , Dst , DstAlign , Src , SrcAlign , Size) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildAlloca (arg1 : LLVMBuilderRef , Ty : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildAlloca (arg1 , Ty , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildArrayAlloca (arg1 : LLVMBuilderRef , Ty : LLVMTypeRef , Val : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildArrayAlloca (arg1 , Ty , Val , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFree (arg1 : LLVMBuilderRef , PointerVal : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFree (arg1 , PointerVal) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildLoad (arg1 : LLVMBuilderRef , PointerVal : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildLoad (arg1 , PointerVal , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildLoad2 (arg1 : LLVMBuilderRef , Ty : LLVMTypeRef , PointerVal : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildLoad2 (arg1 , Ty , PointerVal , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildStore (arg1 : LLVMBuilderRef , Val : LLVMValueRef , Ptr : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildStore (arg1 , Val , Ptr) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildGEP (B : LLVMBuilderRef , Pointer : LLVMValueRef , Indices : * mut LLVMValueRef , NumIndices : :: libc :: c_uint , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildGEP (B , Pointer , Indices , NumIndices , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildInBoundsGEP (B : LLVMBuilderRef , Pointer : LLVMValueRef , Indices : * mut LLVMValueRef , NumIndices : :: libc :: c_uint , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildInBoundsGEP (B , Pointer , Indices , NumIndices , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildStructGEP (B : LLVMBuilderRef , Pointer : LLVMValueRef , Idx : :: libc :: c_uint , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildStructGEP (B , Pointer , Idx , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildGEP2 (B : LLVMBuilderRef , Ty : LLVMTypeRef , Pointer : LLVMValueRef , Indices : * mut LLVMValueRef , NumIndices : :: libc :: c_uint , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildGEP2 (B , Ty , Pointer , Indices , NumIndices , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildInBoundsGEP2 (B : LLVMBuilderRef , Ty : LLVMTypeRef , Pointer : LLVMValueRef , Indices : * mut LLVMValueRef , NumIndices : :: libc :: c_uint , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildInBoundsGEP2 (B , Ty , Pointer , Indices , NumIndices , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildStructGEP2 (B : LLVMBuilderRef , Ty : LLVMTypeRef , Pointer : LLVMValueRef , Idx : :: libc :: c_uint , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildStructGEP2 (B , Ty , Pointer , Idx , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildGlobalString (B : LLVMBuilderRef , Str : * const :: libc :: c_char , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildGlobalString (B , Str , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildGlobalStringPtr (B : LLVMBuilderRef , Str : * const :: libc :: c_char , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildGlobalStringPtr (B , Str , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMGetVolatile (MemoryAccessInst : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMGetVolatile (MemoryAccessInst) } # [no_mangle] pub unsafe extern "C" fn LLVMSetVolatile (MemoryAccessInst : LLVMValueRef , IsVolatile : LLVMBool) { llvm_sys :: core :: LLVMSetVolatile (MemoryAccessInst , IsVolatile) } # [no_mangle] pub unsafe extern "C" fn LLVMGetWeak (CmpXchgInst : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMGetWeak (CmpXchgInst) } # [no_mangle] pub unsafe extern "C" fn LLVMSetWeak (CmpXchgInst : LLVMValueRef , IsWeak : LLVMBool) { llvm_sys :: core :: LLVMSetWeak (CmpXchgInst , IsWeak) } # [no_mangle] pub unsafe extern "C" fn LLVMGetOrdering (MemoryAccessInst : LLVMValueRef) -> LLVMAtomicOrdering { llvm_sys :: core :: LLVMGetOrdering (MemoryAccessInst) } # [no_mangle] pub unsafe extern "C" fn LLVMSetOrdering (MemoryAccessInst : LLVMValueRef , Ordering : LLVMAtomicOrdering ,) { llvm_sys :: core :: LLVMSetOrdering (MemoryAccessInst , Ordering) } # [no_mangle] pub unsafe extern "C" fn LLVMGetAtomicRMWBinOp (AtomicRMWInst : LLVMValueRef) -> LLVMAtomicRMWBinOp { llvm_sys :: core :: LLVMGetAtomicRMWBinOp (AtomicRMWInst) } # [no_mangle] pub unsafe extern "C" fn LLVMSetAtomicRMWBinOp (AtomicRMWInst : LLVMValueRef , BinOp : LLVMAtomicRMWBinOp ,) { llvm_sys :: core :: LLVMSetAtomicRMWBinOp (AtomicRMWInst , BinOp) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildTrunc (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildTrunc (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildZExt (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildZExt (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildSExt (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildSExt (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFPToUI (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFPToUI (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFPToSI (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFPToSI (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildUIToFP (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildUIToFP (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildSIToFP (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildSIToFP (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFPTrunc (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFPTrunc (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFPExt (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFPExt (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildPtrToInt (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildPtrToInt (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildIntToPtr (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildIntToPtr (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildBitCast (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildBitCast (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildAddrSpaceCast (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildAddrSpaceCast (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildZExtOrBitCast (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildZExtOrBitCast (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildSExtOrBitCast (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildSExtOrBitCast (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildTruncOrBitCast (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildTruncOrBitCast (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildCast (B : LLVMBuilderRef , Op : LLVMOpcode , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildCast (B , Op , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildPointerCast (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildPointerCast (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildIntCast (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildIntCast (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildIntCast2 (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , IsSigned : LLVMBool , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildIntCast2 (arg1 , Val , DestTy , IsSigned , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFPCast (arg1 : LLVMBuilderRef , Val : LLVMValueRef , DestTy : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFPCast (arg1 , Val , DestTy , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildICmp (arg1 : LLVMBuilderRef , Op : LLVMIntPredicate , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildICmp (arg1 , Op , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFCmp (arg1 : LLVMBuilderRef , Op : LLVMRealPredicate , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFCmp (arg1 , Op , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildPhi (arg1 : LLVMBuilderRef , Ty : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildPhi (arg1 , Ty , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildCall (arg1 : LLVMBuilderRef , Fn : LLVMValueRef , Args : * mut LLVMValueRef , NumArgs : :: libc :: c_uint , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildCall (arg1 , Fn , Args , NumArgs , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildCall2 (arg1 : LLVMBuilderRef , arg2 : LLVMTypeRef , Fn : LLVMValueRef , Args : * mut LLVMValueRef , NumArgs : :: libc :: c_uint , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildCall2 (arg1 , arg2 , Fn , Args , NumArgs , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildSelect (arg1 : LLVMBuilderRef , If : LLVMValueRef , Then : LLVMValueRef , Else : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildSelect (arg1 , If , Then , Else , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildVAArg (arg1 : LLVMBuilderRef , List : LLVMValueRef , Ty : LLVMTypeRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildVAArg (arg1 , List , Ty , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildExtractElement (arg1 : LLVMBuilderRef , VecVal : LLVMValueRef , Index : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildExtractElement (arg1 , VecVal , Index , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildInsertElement (arg1 : LLVMBuilderRef , VecVal : LLVMValueRef , EltVal : LLVMValueRef , Index : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildInsertElement (arg1 , VecVal , EltVal , Index , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildShuffleVector (arg1 : LLVMBuilderRef , V1 : LLVMValueRef , V2 : LLVMValueRef , Mask : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildShuffleVector (arg1 , V1 , V2 , Mask , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildExtractValue (arg1 : LLVMBuilderRef , AggVal : LLVMValueRef , Index : :: libc :: c_uint , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildExtractValue (arg1 , AggVal , Index , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildInsertValue (arg1 : LLVMBuilderRef , AggVal : LLVMValueRef , EltVal : LLVMValueRef , Index : :: libc :: c_uint , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildInsertValue (arg1 , AggVal , EltVal , Index , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFreeze (arg1 : LLVMBuilderRef , Val : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFreeze (arg1 , Val , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildIsNull (arg1 : LLVMBuilderRef , Val : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildIsNull (arg1 , Val , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildIsNotNull (arg1 : LLVMBuilderRef , Val : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildIsNotNull (arg1 , Val , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildPtrDiff (arg1 : LLVMBuilderRef , LHS : LLVMValueRef , RHS : LLVMValueRef , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildPtrDiff (arg1 , LHS , RHS , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildFence (B : LLVMBuilderRef , ordering : LLVMAtomicOrdering , singleThread : LLVMBool , Name : * const :: libc :: c_char ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildFence (B , ordering , singleThread , Name) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildAtomicRMW (B : LLVMBuilderRef , op : LLVMAtomicRMWBinOp , PTR : LLVMValueRef , Val : LLVMValueRef , ordering : LLVMAtomicOrdering , singleThread : LLVMBool ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildAtomicRMW (B , op , PTR , Val , ordering , singleThread) } # [no_mangle] pub unsafe extern "C" fn LLVMBuildAtomicCmpXchg (B : LLVMBuilderRef , Ptr : LLVMValueRef , Cmp : LLVMValueRef , New : LLVMValueRef , SuccessOrdering : LLVMAtomicOrdering , FailureOrdering : LLVMAtomicOrdering , SingleThread : LLVMBool ,) -> LLVMValueRef { llvm_sys :: core :: LLVMBuildAtomicCmpXchg (B , Ptr , Cmp , New , SuccessOrdering , FailureOrdering , SingleThread) } # [no_mangle] pub unsafe extern "C" fn LLVMGetNumMaskElements (ShuffleVectorInst : LLVMValueRef) -> :: libc :: c_uint { llvm_sys :: core :: LLVMGetNumMaskElements (ShuffleVectorInst) } # [no_mangle] pub unsafe extern "C" fn LLVMGetUndefMaskElem () -> :: libc :: c_int { llvm_sys :: core :: LLVMGetUndefMaskElem () } # [no_mangle] pub unsafe extern "C" fn LLVMGetMaskValue (ShuffleVectorInst : LLVMValueRef , Elt : :: libc :: c_uint ,) -> :: libc :: c_int { llvm_sys :: core :: LLVMGetMaskValue (ShuffleVectorInst , Elt) } # [no_mangle] pub unsafe extern "C" fn LLVMIsAtomicSingleThread (AtomicInst : LLVMValueRef) -> LLVMBool { llvm_sys :: core :: LLVMIsAtomicSingleThread (AtomicInst) } # [no_mangle] pub unsafe extern "C" fn LLVMSetAtomicSingleThread (AtomicInst : LLVMValueRef , SingleThread : LLVMBool ,) { llvm_sys :: core :: LLVMSetAtomicSingleThread (AtomicInst , SingleThread) } # [no_mangle] pub unsafe extern "C" fn LLVMGetCmpXchgSuccessOrdering (CmpXchgInst : LLVMValueRef ,) -> LLVMAtomicOrdering { llvm_sys :: core :: LLVMGetCmpXchgSuccessOrdering (CmpXchgInst) } # [no_mangle] pub unsafe extern "C" fn LLVMSetCmpXchgSuccessOrdering (CmpXchgInst : LLVMValueRef , Ordering : LLVMAtomicOrdering ,) { llvm_sys :: core :: LLVMSetCmpXchgSuccessOrdering (CmpXchgInst , Ordering) } # [no_mangle] pub unsafe extern "C" fn LLVMGetCmpXchgFailureOrdering (CmpXchgInst : LLVMValueRef ,) -> LLVMAtomicOrdering { llvm_sys :: core :: LLVMGetCmpXchgFailureOrdering (CmpXchgInst) } # [no_mangle] pub unsafe extern "C" fn LLVMSetCmpXchgFailureOrdering (CmpXchgInst : LLVMValueRef , Ordering : LLVMAtomicOrdering ,) { llvm_sys :: core :: LLVMSetCmpXchgFailureOrdering (CmpXchgInst , Ordering) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateModuleProviderForExistingModule (M : LLVMModuleRef ,) -> LLVMModuleProviderRef { llvm_sys :: core :: LLVMCreateModuleProviderForExistingModule (M) } # [no_mangle] pub unsafe extern "C" fn LLVMDisposeModuleProvider (M : LLVMModuleProviderRef) { llvm_sys :: core :: LLVMDisposeModuleProvider (M) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateMemoryBufferWithContentsOfFile (Path : * const :: libc :: c_char , OutMemBuf : * mut LLVMMemoryBufferRef , OutMessage : * mut * mut :: libc :: c_char ,) -> LLVMBool { llvm_sys :: core :: LLVMCreateMemoryBufferWithContentsOfFile (Path , OutMemBuf , OutMessage) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateMemoryBufferWithSTDIN (OutMemBuf : * mut LLVMMemoryBufferRef , OutMessage : * mut * mut :: libc :: c_char ,) -> LLVMBool { llvm_sys :: core :: LLVMCreateMemoryBufferWithSTDIN (OutMemBuf , OutMessage) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateMemoryBufferWithMemoryRange (InputData : * const :: libc :: c_char , InputDataLength : :: libc :: size_t , BufferName : * const :: libc :: c_char , RequiresNullTerminator : LLVMBool ,) -> LLVMMemoryBufferRef { llvm_sys :: core :: LLVMCreateMemoryBufferWithMemoryRange (InputData , InputDataLength , BufferName , RequiresNullTerminator) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateMemoryBufferWithMemoryRangeCopy (InputData : * const :: libc :: c_char , InputDataLength : :: libc :: size_t , BufferName : * const :: libc :: c_char ,) -> LLVMMemoryBufferRef { llvm_sys :: core :: LLVMCreateMemoryBufferWithMemoryRangeCopy (InputData , InputDataLength , BufferName) } # [no_mangle] pub unsafe extern "C" fn LLVMGetBufferStart (MemBuf : LLVMMemoryBufferRef) -> * const :: libc :: c_char { llvm_sys :: core :: LLVMGetBufferStart (MemBuf) } # [no_mangle] pub unsafe extern "C" fn LLVMGetBufferSize (MemBuf : LLVMMemoryBufferRef) -> :: libc :: size_t { llvm_sys :: core :: LLVMGetBufferSize (MemBuf) } # [no_mangle] pub unsafe extern "C" fn LLVMDisposeMemoryBuffer (MemBuf : LLVMMemoryBufferRef) { llvm_sys :: core :: LLVMDisposeMemoryBuffer (MemBuf) } # [no_mangle] pub unsafe extern "C" fn LLVMGetGlobalPassRegistry () -> LLVMPassRegistryRef { llvm_sys :: core :: LLVMGetGlobalPassRegistry () } # [no_mangle] pub unsafe extern "C" fn LLVMCreatePassManager () -> LLVMPassManagerRef { llvm_sys :: core :: LLVMCreatePassManager () } # [no_mangle] pub unsafe extern "C" fn LLVMCreateFunctionPassManagerForModule (M : LLVMModuleRef ,) -> LLVMPassManagerRef { llvm_sys :: core :: LLVMCreateFunctionPassManagerForModule (M) } # [no_mangle] pub unsafe extern "C" fn LLVMCreateFunctionPassManager (MP : LLVMModuleProviderRef ,) -> LLVMPassManagerRef { llvm_sys :: core :: LLVMCreateFunctionPassManager (MP) } # [no_mangle] pub unsafe extern "C" fn LLVMRunPassManager (PM : LLVMPassManagerRef , M : LLVMModuleRef) -> LLVMBool { llvm_sys :: core :: LLVMRunPassManager (PM , M) } # [no_mangle] pub unsafe extern "C" fn LLVMInitializeFunctionPassManager (FPM : LLVMPassManagerRef) -> LLVMBool { llvm_sys :: core :: LLVMInitializeFunctionPassManager (FPM) } # [no_mangle] pub unsafe extern "C" fn LLVMRunFunctionPassManager (FPM : LLVMPassManagerRef , F : LLVMValueRef ,) -> LLVMBool { llvm_sys :: core :: LLVMRunFunctionPassManager (FPM , F) } # [no_mangle] pub unsafe extern "C" fn LLVMFinalizeFunctionPassManager (FPM : LLVMPassManagerRef) -> LLVMBool { llvm_sys :: core :: LLVMFinalizeFunctionPassManager (FPM) } # [no_mangle] pub unsafe extern "C" fn LLVMDisposePassManager (PM : LLVMPassManagerRef) { llvm_sys :: core :: LLVMDisposePassManager (PM) } # [doc = " Deprecated: LLVM threading is configured at compile-time with `LLVM_ENABLE_THREADS`"] # [no_mangle] pub unsafe extern "C" fn LLVMStartMultithreaded () -> LLVMBool { llvm_sys :: core :: LLVMStartMultithreaded () } # [doc = " Deprecated: LLVM threading is configured at compile-time with `LLVM_ENABLE_THREADS`"] # [no_mangle] pub unsafe extern "C" fn LLVMStopMultithreaded () { llvm_sys :: core :: LLVMStopMultithreaded () } # [no_mangle] pub unsafe extern "C" fn LLVMIsMultithreaded () -> LLVMBool { llvm_sys :: core :: LLVMIsMultithreaded () }