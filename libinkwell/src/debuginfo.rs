# ! [doc = " Generation of DWARF debug info."] use llvm_sys :: debuginfo ; pub use llvm_sys :: debuginfo :: * ; use llvm_sys :: prelude :: * ; # [doc = " The current debug metadata version number."] # [no_mangle] pub unsafe extern "C" fn LLVMDebugMetadataVersion () -> :: libc :: c_uint { llvm_sys :: debuginfo :: LLVMDebugMetadataVersion () } # [doc = " The version of debug metadata that's present in the provided Module."] # [no_mangle] pub unsafe extern "C" fn LLVMGetModuleDebugMetadataVersion (Module : LLVMModuleRef ,) -> :: libc :: c_uint { llvm_sys :: debuginfo :: LLVMGetModuleDebugMetadataVersion (Module) } # [doc = " Strip debug info in the module if it exists."] # [no_mangle] pub unsafe extern "C" fn LLVMStripModuleDebugInfo (Module : LLVMModuleRef) -> LLVMBool { llvm_sys :: debuginfo :: LLVMStripModuleDebugInfo (Module) } # [doc = " Construct a builder for a module, do not allow unresolved nodes."] # [no_mangle] pub unsafe extern "C" fn LLVMCreateDIBuilderDisallowUnresolved (M : LLVMModuleRef ,) -> LLVMDIBuilderRef { llvm_sys :: debuginfo :: LLVMCreateDIBuilderDisallowUnresolved (M) } # [doc = " Construct a builder for a module and collect unresolved nodes."] # [no_mangle] pub unsafe extern "C" fn LLVMCreateDIBuilder (M : LLVMModuleRef) -> LLVMDIBuilderRef { llvm_sys :: debuginfo :: LLVMCreateDIBuilder (M) } # [doc = " Deallocate a builder and everything it owns."] # [doc = ""] # [doc = " The builder must be finalized before this."] # [no_mangle] pub unsafe extern "C" fn LLVMDisposeDIBuilder (Builder : LLVMDIBuilderRef) { llvm_sys :: debuginfo :: LLVMDisposeDIBuilder (Builder) } # [doc = " Construct any deferred debug info descriptors."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderFinalize (Builder : LLVMDIBuilderRef) { llvm_sys :: debuginfo :: LLVMDIBuilderFinalize (Builder) } # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateCompileUnit (Builder : LLVMDIBuilderRef , Lang : LLVMDWARFSourceLanguage , FileRef : LLVMMetadataRef , Producer : * const :: libc :: c_char , ProducerLen : :: libc :: size_t , isOptimized : LLVMBool , Flags : * const :: libc :: c_char , FlagsLen : :: libc :: size_t , RuntimeVer : :: libc :: c_uint , SplitName : * const :: libc :: c_char , SplitNameLen : :: libc :: size_t , Kind : LLVMDWARFEmissionKind , DWOId : :: libc :: c_uint , SplitDebugInlining : LLVMBool , DebugInfoForProfiling : LLVMBool , SysRoot : * const :: libc :: c_char , SysRootLen : :: libc :: size_t , SDK : * const :: libc :: c_char , SDKLen : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateCompileUnit (Builder , Lang , FileRef , Producer , ProducerLen , isOptimized , Flags , FlagsLen , RuntimeVer , SplitName , SplitNameLen , Kind , DWOId , SplitDebugInlining , DebugInfoForProfiling , SysRoot , SysRootLen , SDK , SDKLen) } # [doc = " Create a file descriptor to hold debugging information for a file."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateFile (Builder : LLVMDIBuilderRef , Filename : * const :: libc :: c_char , FilenameLen : :: libc :: size_t , Directory : * const :: libc :: c_char , DirectoryLen : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateFile (Builder , Filename , FilenameLen , Directory , DirectoryLen) } # [doc = " Creates a new descriptor for a module with the specified parent scope."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateModule (Builder : LLVMDIBuilderRef , ParentScope : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , ConfigMacros : * const :: libc :: c_char , ConfigMacrosLen : :: libc :: size_t , IncludePath : * const :: libc :: c_char , IncludePathLen : :: libc :: size_t , APINotesFile : * const :: libc :: c_char , APINotesFileLen : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateModule (Builder , ParentScope , Name , NameLen , ConfigMacros , ConfigMacrosLen , IncludePath , IncludePathLen , APINotesFile , APINotesFileLen) } # [doc = " Creates a new descriptor for a namespace with the specified parent scope."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateNameSpace (Builder : LLVMDIBuilderRef , ParentScope : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , ExportSymbols : LLVMBool ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateNameSpace (Builder , ParentScope , Name , NameLen , ExportSymbols) } # [doc = " Create a new descriptor for the specified subprogram."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateFunction (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , LinkageName : * const :: libc :: c_char , LinkageNameLen : :: libc :: size_t , File : LLVMMetadataRef , LineNo : :: libc :: c_uint , Ty : LLVMMetadataRef , IsLocalToUnit : LLVMBool , IsDefinition : LLVMBool , ScopeLine : :: libc :: c_uint , Flags : LLVMDIFlags , IsOptimized : LLVMBool ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateFunction (Builder , Scope , Name , NameLen , LinkageName , LinkageNameLen , File , LineNo , Ty , IsLocalToUnit , IsDefinition , ScopeLine , Flags , IsOptimized) } # [doc = " Create a descriptor for a lexical block with the specified parent context."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateLexicalBlock (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , File : LLVMMetadataRef , Line : :: libc :: c_uint , Column : :: libc :: c_uint ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateLexicalBlock (Builder , Scope , File , Line , Column) } # [doc = " Create a descriptor for a lexical block with a new file attached."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateLexicalBlockFile (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , File : LLVMMetadataRef , Discriminator : :: libc :: c_uint ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateLexicalBlockFile (Builder , Scope , File , Discriminator) } # [doc = " Create a descriptor for an imported namespace. Suitable for e.g. C++ using declarations."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateImportedModuleFromNamespace (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , NS : LLVMMetadataRef , File : LLVMMetadataRef , Line : :: libc :: c_uint ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateImportedModuleFromNamespace (Builder , Scope , NS , File , Line) } # [doc = " Create a descriptor for an imported module that aliases another imported entity descriptor."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateImportedModuleFromAlias (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , ImportedEntity : LLVMMetadataRef , File : LLVMMetadataRef , Line : :: libc :: c_uint ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateImportedModuleFromAlias (Builder , Scope , ImportedEntity , File , Line) } # [doc = " Create a descriptor for an imported module."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateImportedModuleFromModule (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , M : LLVMMetadataRef , File : LLVMMetadataRef , Line : :: libc :: c_uint ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateImportedModuleFromModule (Builder , Scope , M , File , Line) } # [doc = " Create a descriptor for an imported function, type, or variable."] # [doc = ""] # [doc = " Suitable for e.g. FORTRAN-style USE declarations."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateImportedDeclaration (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , Decl : LLVMMetadataRef , File : LLVMMetadataRef , Line : :: libc :: c_uint , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateImportedDeclaration (Builder , Scope , Decl , File , Line , Name , NameLen) } # [doc = " Creates a new DebugLocation that describes a source location."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateDebugLocation (Ctx : LLVMContextRef , Line : :: libc :: c_uint , Column : :: libc :: c_uint , Scope : LLVMMetadataRef , InlinedAt : LLVMMetadataRef ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateDebugLocation (Ctx , Line , Column , Scope , InlinedAt) } # [doc = " Get the line number of this debug location."] # [no_mangle] pub unsafe extern "C" fn LLVMDILocationGetLine (Location : LLVMMetadataRef) -> :: libc :: c_uint { llvm_sys :: debuginfo :: LLVMDILocationGetLine (Location) } # [doc = " Get the column number of this debug location."] # [no_mangle] pub unsafe extern "C" fn LLVMDILocationGetColumn (Location : LLVMMetadataRef) -> :: libc :: c_uint { llvm_sys :: debuginfo :: LLVMDILocationGetColumn (Location) } # [doc = " Get the local scope associated with this debug location."] # [no_mangle] pub unsafe extern "C" fn LLVMDILocationGetScope (Location : LLVMMetadataRef) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDILocationGetScope (Location) } # [doc = " Get the \"inline at\" location associated with this debug location."] # [no_mangle] pub unsafe extern "C" fn LLVMDILocationGetInlinedAt (Location : LLVMMetadataRef) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDILocationGetInlinedAt (Location) } # [doc = " Get the metadata of the file associated with a given scope."] # [no_mangle] pub unsafe extern "C" fn LLVMDIScopeGetFile (Scope : LLVMMetadataRef) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIScopeGetFile (Scope) } # [doc = " Get the directory of a given file."] # [no_mangle] pub unsafe extern "C" fn LLVMDIFileGetDirectory (File : LLVMMetadataRef , Len : * mut :: libc :: c_uint ,) -> * const :: libc :: c_char { llvm_sys :: debuginfo :: LLVMDIFileGetDirectory (File , Len) } # [doc = " Get the name of a given file."] # [no_mangle] pub unsafe extern "C" fn LLVMDIFileGetFilename (File : LLVMMetadataRef , Len : * mut :: libc :: c_uint ,) -> * const :: libc :: c_char { llvm_sys :: debuginfo :: LLVMDIFileGetFilename (File , Len) } # [doc = " Get the source of a given file."] # [no_mangle] pub unsafe extern "C" fn LLVMDIFileGetSource (File : LLVMMetadataRef , Len : * mut :: libc :: c_uint ,) -> * const :: libc :: c_char { llvm_sys :: debuginfo :: LLVMDIFileGetSource (File , Len) } # [doc = " Create a type array."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderGetOrCreateTypeArray (Builder : LLVMDIBuilderRef , Data : * mut LLVMMetadataRef , NumElements : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderGetOrCreateTypeArray (Builder , Data , NumElements) } # [doc = " Create subroutine type."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateSubroutineType (Builder : LLVMDIBuilderRef , File : LLVMMetadataRef , ParameterTypes : * mut LLVMMetadataRef , NumParameterTypes : :: libc :: c_uint , Flags : LLVMDIFlags ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateSubroutineType (Builder , File , ParameterTypes , NumParameterTypes , Flags) } # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateMacro (Builder : LLVMDIBuilderRef , ParentMacroFile : LLVMMetadataRef , Line : :: libc :: c_uint , RecordType : LLVMDWARFMacinfoRecordType , Name : * const :: libc :: c_char , NameLen : usize , Value : * const :: libc :: c_char , ValueLen : usize ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateMacro (Builder , ParentMacroFile , Line , RecordType , Name , NameLen , Value , ValueLen) } # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateTempMacroFile (Builder : LLVMDIBuilderRef , ParentMacroFile : LLVMMetadataRef , Line : :: libc :: c_uint , File : LLVMMetadataRef ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateTempMacroFile (Builder , ParentMacroFile , Line , File) } # [doc = " Create debugging information entry for an enumerator."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateEnumerator (Builder : LLVMDIBuilderRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , Value : i64 , IsUnsigned : LLVMBool ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateEnumerator (Builder , Name , NameLen , Value , IsUnsigned) } # [doc = " Create debugging information entry for an enumeration."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateEnumerationType (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , File : LLVMMetadataRef , LineNumber : :: libc :: c_uint , SizeInBits : u64 , AlignInBits : u32 , Elements : * mut LLVMMetadataRef , NumElements : :: libc :: c_uint , ClassTy : LLVMMetadataRef ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateEnumerationType (Builder , Scope , Name , NameLen , File , LineNumber , SizeInBits , AlignInBits , Elements , NumElements , ClassTy) } # [doc = " Create debugging information entry for a union."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateUnionType (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , File : LLVMMetadataRef , LineNumber : :: libc :: c_uint , SizeInBits : u64 , AlignInBits : u32 , Flags : LLVMDIFlags , Elements : * mut LLVMMetadataRef , NumElements : :: libc :: c_uint , RunTimeLang : :: libc :: c_uint , UniqueId : * const :: libc :: c_char , UniqueIdLen : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateUnionType (Builder , Scope , Name , NameLen , File , LineNumber , SizeInBits , AlignInBits , Flags , Elements , NumElements , RunTimeLang , UniqueId , UniqueIdLen) } # [doc = " Create debugging information entry for an array."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateArrayType (Builder : LLVMDIBuilderRef , Size : u64 , AlignInBits : u32 , Ty : LLVMMetadataRef , Subscripts : * mut LLVMMetadataRef , NumSubscripts : :: libc :: c_uint ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateArrayType (Builder , Size , AlignInBits , Ty , Subscripts , NumSubscripts) } # [doc = " Create debugging information entry for a vector type."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateVectorType (Builder : LLVMDIBuilderRef , Size : u64 , AlignInBits : u32 , Ty : LLVMMetadataRef , Subscripts : * mut LLVMMetadataRef , NumSubscripts : :: libc :: c_uint ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateVectorType (Builder , Size , AlignInBits , Ty , Subscripts , NumSubscripts) } # [doc = " Create a DWARF unspecified type."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateUnspecifiedType (Builder : LLVMDIBuilderRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateUnspecifiedType (Builder , Name , NameLen) } # [doc = " Create debugging information entry for a basic type."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateBasicType (Builder : LLVMDIBuilderRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , SizeInBits : u64 , Encoding : LLVMDWARFTypeEncoding , Flags : LLVMDIFlags ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateBasicType (Builder , Name , NameLen , SizeInBits , Encoding , Flags) } # [doc = " Create debugging information entry for a pointer."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreatePointerType (Builder : LLVMDIBuilderRef , PointeeTy : LLVMMetadataRef , SizeInBits : u64 , AlignInBits : u32 , AddressSpace : :: libc :: c_uint , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreatePointerType (Builder , PointeeTy , SizeInBits , AlignInBits , AddressSpace , Name , NameLen) } # [doc = " Create debugging information entry for a struct."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateStructType (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , File : LLVMMetadataRef , LineNumber : :: libc :: c_uint , SizeInBits : u64 , AlignInBits : u32 , Flags : LLVMDIFlags , DerivedFrom : LLVMMetadataRef , Elements : * mut LLVMMetadataRef , NumElements : :: libc :: c_uint , RunTimeLang : :: libc :: c_uint , VTableHolder : LLVMMetadataRef , UniqueId : * const :: libc :: c_char , UniqueIdLen : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateStructType (Builder , Scope , Name , NameLen , File , LineNumber , SizeInBits , AlignInBits , Flags , DerivedFrom , Elements , NumElements , RunTimeLang , VTableHolder , UniqueId , UniqueIdLen) } # [doc = " Create debugging information entry for a member."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateMemberType (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , File : LLVMMetadataRef , LineNo : :: libc :: c_uint , SizeInBits : u64 , AlignInBits : u32 , OffsetInBits : u64 , Flags : LLVMDIFlags , Ty : LLVMMetadataRef ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateMemberType (Builder , Scope , Name , NameLen , File , LineNo , SizeInBits , AlignInBits , OffsetInBits , Flags , Ty) } # [doc = " Create debugging information entry for a C++ static data member."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateStaticMemberType (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , File : LLVMMetadataRef , LineNumber : :: libc :: c_uint , Type : LLVMMetadataRef , Flags : LLVMDIFlags , ConstantVal : LLVMValueRef , AlignInBits : u32 ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateStaticMemberType (Builder , Scope , Name , NameLen , File , LineNumber , Type , Flags , ConstantVal , AlignInBits) } # [doc = " Create debugging information entry for a pointer to member."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateMemberPointerType (Builder : LLVMDIBuilderRef , PointeeType : LLVMMetadataRef , ClassType : LLVMMetadataRef , SizeInBits : u64 , AlignInBits : u32 , Flags : LLVMDIFlags ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateMemberPointerType (Builder , PointeeType , ClassType , SizeInBits , AlignInBits , Flags) } # [doc = " Create debugging information entry for Objective-C instance variable."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateObjCIVar (Builder : LLVMDIBuilderRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , File : LLVMMetadataRef , LineNo : :: libc :: c_uint , SizeInBits : u64 , AlignInBits : u32 , OffsetInBits : u64 , Flags : LLVMDIFlags , Ty : LLVMMetadataRef , PropertyNode : LLVMMetadataRef ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateObjCIVar (Builder , Name , NameLen , File , LineNo , SizeInBits , AlignInBits , OffsetInBits , Flags , Ty , PropertyNode) } # [doc = " Create debugging information entry for Objective-C property."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateObjCProperty (Builder : LLVMDIBuilderRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , File : LLVMMetadataRef , LineNo : :: libc :: c_uint , GetterName : * const :: libc :: c_char , GetterNameLen : :: libc :: size_t , SetterName : * const :: libc :: c_char , SetterNameLen : :: libc :: size_t , PropertyAttributes : :: libc :: c_uint , Ty : LLVMMetadataRef ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateObjCProperty (Builder , Name , NameLen , File , LineNo , GetterName , GetterNameLen , SetterName , SetterNameLen , PropertyAttributes , Ty) } # [doc = " Create a uniqued DIType* clone with FlagObjectPointer and FlagArtificial set."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateObjectPointerType (Builder : LLVMDIBuilderRef , Type : LLVMMetadataRef ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateObjectPointerType (Builder , Type) } # [doc = " Create debugging information entry for a qualified type, e.g. 'const int'."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateQualifiedType (Builder : LLVMDIBuilderRef , Tag : :: libc :: c_uint , Type : LLVMMetadataRef ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateQualifiedType (Builder , Tag , Type) } # [doc = " Create debugging information entry for a c++ style reference or rvalue reference type."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateReferenceType (Builder : LLVMDIBuilderRef , Tag : :: libc :: c_uint , Type : LLVMMetadataRef ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateReferenceType (Builder , Tag , Type) } # [doc = " Create C++11 nullptr type."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateNullPtrType (Builder : LLVMDIBuilderRef ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateNullPtrType (Builder) } # [doc = " Create debugging information entry for a typedef."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateTypedef (Builder : LLVMDIBuilderRef , Type : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , File : LLVMMetadataRef , LineNo : :: libc :: c_uint , Scope : LLVMMetadataRef , AlignInBits : u32 ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateTypedef (Builder , Type , Name , NameLen , File , LineNo , Scope , AlignInBits) } # [doc = " Create debugging information entry to establish inheritance relationship between two types."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateInheritance (Builder : LLVMDIBuilderRef , Ty : LLVMMetadataRef , BaseTy : LLVMMetadataRef , BaseOffset : u64 , VBPtrOffset : u32 , Flags : LLVMDIFlags ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateInheritance (Builder , Ty , BaseTy , BaseOffset , VBPtrOffset , Flags) } # [doc = " Create a permanent forward-declared type."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateForwardDecl (Builder : LLVMDIBuilderRef , Tag : :: libc :: c_uint , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , Scope : LLVMMetadataRef , File : LLVMMetadataRef , Line : :: libc :: c_uint , RuntimeLang : :: libc :: c_uint , SizeInBits : u64 , AlignInBits : u32 , UniqueIdentifier : * const :: libc :: c_char , UniqueIdentifierLen : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateForwardDecl (Builder , Tag , Name , NameLen , Scope , File , Line , RuntimeLang , SizeInBits , AlignInBits , UniqueIdentifier , UniqueIdentifierLen) } # [doc = " Create a temporary forward-declared type."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateReplaceableCompositeType (Builder : LLVMDIBuilderRef , Tag : :: libc :: c_uint , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , Scope : LLVMMetadataRef , File : LLVMMetadataRef , Line : :: libc :: c_uint , RuntimeLang : :: libc :: c_uint , SizeInBits : u64 , AlignInBits : u32 , Flags : LLVMDIFlags , UniqueIdentifier : * const :: libc :: c_char , UniqueIdentifierLen : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateReplaceableCompositeType (Builder , Tag , Name , NameLen , Scope , File , Line , RuntimeLang , SizeInBits , AlignInBits , Flags , UniqueIdentifier , UniqueIdentifierLen) } # [doc = " Create debugging information entry for a bit field member."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateBitFieldMemberType (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , File : LLVMMetadataRef , LineNumber : :: libc :: c_uint , SizeInBits : u64 , OffsetInBits : u64 , StorageOffsetInBits : u64 , Flags : LLVMDIFlags , Type : LLVMMetadataRef ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateBitFieldMemberType (Builder , Scope , Name , NameLen , File , LineNumber , SizeInBits , OffsetInBits , StorageOffsetInBits , Flags , Type) } # [doc = " Create debugging information entry for a class."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateClassType (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , File : LLVMMetadataRef , LineNumber : :: libc :: c_uint , SizeInBits : u64 , AlignInBits : u32 , OffsetInBits : u64 , Flags : LLVMDIFlags , DerivedFrom : LLVMMetadataRef , Elements : * mut LLVMMetadataRef , NumElements : :: libc :: c_uint , VTableHolder : LLVMMetadataRef , TemplateParamsNode : LLVMMetadataRef , UniqueIdentifier : * const :: libc :: c_char , UniqueIdentifierLen : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateClassType (Builder , Scope , Name , NameLen , File , LineNumber , SizeInBits , AlignInBits , OffsetInBits , Flags , DerivedFrom , Elements , NumElements , VTableHolder , TemplateParamsNode , UniqueIdentifier , UniqueIdentifierLen) } # [doc = " Create a uniqued DIType* clone with FlagArtificial set."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateArtificialType (Builder : LLVMDIBuilderRef , Type : LLVMMetadataRef ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateArtificialType (Builder , Type) } # [doc = " Get the name of this DIType."] # [no_mangle] pub unsafe extern "C" fn LLVMDITypeGetName (DType : LLVMMetadataRef , Length : * mut :: libc :: size_t ,) -> * const :: libc :: c_char { llvm_sys :: debuginfo :: LLVMDITypeGetName (DType , Length) } # [doc = " Get the size of this DIType in bits."] # [no_mangle] pub unsafe extern "C" fn LLVMDITypeGetSizeInBits (DType : LLVMMetadataRef) -> u64 { llvm_sys :: debuginfo :: LLVMDITypeGetSizeInBits (DType) } # [doc = " Get the offset of this DIType in bits."] # [no_mangle] pub unsafe extern "C" fn LLVMDITypeGetOffsetInBits (DType : LLVMMetadataRef) -> u64 { llvm_sys :: debuginfo :: LLVMDITypeGetOffsetInBits (DType) } # [doc = " Get the alignment of this DIType in bits."] # [no_mangle] pub unsafe extern "C" fn LLVMDITypeGetAlignInBits (DType : LLVMMetadataRef) -> u32 { llvm_sys :: debuginfo :: LLVMDITypeGetAlignInBits (DType) } # [doc = " Get the source line where this DIType is declared."] # [no_mangle] pub unsafe extern "C" fn LLVMDITypeGetLine (DType : LLVMMetadataRef) -> :: libc :: c_uint { llvm_sys :: debuginfo :: LLVMDITypeGetLine (DType) } # [doc = " Get the flags associated with this DIType."] # [no_mangle] pub unsafe extern "C" fn LLVMDITypeGetFlags (DType : LLVMMetadataRef) -> LLVMDIFlags { llvm_sys :: debuginfo :: LLVMDITypeGetFlags (DType) } # [doc = " Create a descriptor for a value range."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderGetOrCreateSubrange (Builder : LLVMDIBuilderRef , LowerBound : i64 , Count : i64 ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderGetOrCreateSubrange (Builder , LowerBound , Count) } # [doc = " Create an array of DI Nodes."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderGetOrCreateArray (Builder : LLVMDIBuilderRef , Data : * mut LLVMMetadataRef , NumElements : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderGetOrCreateArray (Builder , Data , NumElements) } # [doc = " Create a new descriptor for the specified variable which has a complex"] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateExpression (Builder : LLVMDIBuilderRef , Addr : * mut i64 , Length : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateExpression (Builder , Addr , Length) } # [doc = " Create a new descriptor for the specified variable that does not have an"] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateConstantValueExpression (Builder : LLVMDIBuilderRef , Value : i64 ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateConstantValueExpression (Builder , Value) } # [doc = " Create a new descriptor for the specified variable."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateGlobalVariableExpression (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , Linkage : * const :: libc :: c_char , LinkLen : :: libc :: size_t , File : LLVMMetadataRef , LineNo : :: libc :: c_uint , Ty : LLVMMetadataRef , LocalToUnit : LLVMBool , Expr : LLVMMetadataRef , Decl : LLVMMetadataRef , AlignInBits : u32 ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateGlobalVariableExpression (Builder , Scope , Name , NameLen , Linkage , LinkLen , File , LineNo , Ty , LocalToUnit , Expr , Decl , AlignInBits) } # [doc = " Retrieves the DIVariable associated with this global variable expression."] # [no_mangle] pub unsafe extern "C" fn LLVMDIGlobalVariableExpressionGetVariable (GVE : LLVMMetadataRef ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIGlobalVariableExpressionGetVariable (GVE) } # [doc = " Retrieves the DIExpression associated with this global variable expression."] # [no_mangle] pub unsafe extern "C" fn LLVMDIGlobalVariableExpressionGetExpression (GVE : LLVMMetadataRef ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIGlobalVariableExpressionGetExpression (GVE) } # [doc = "Get the metadata of the file associated with a given variable."] # [no_mangle] pub unsafe extern "C" fn LLVMDIVariableGetFile (Var : LLVMMetadataRef) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIVariableGetFile (Var) } # [doc = " Get the metadata of the scope associated with a given variable."] # [no_mangle] pub unsafe extern "C" fn LLVMDIVariableGetScope (Var : LLVMMetadataRef) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIVariableGetScope (Var) } # [doc = " Get the source line where this \\c DIVariable is declared."] # [no_mangle] pub unsafe extern "C" fn LLVMDIVariableGetLine (Var : LLVMMetadataRef) -> :: libc :: c_uint { llvm_sys :: debuginfo :: LLVMDIVariableGetLine (Var) } # [doc = " Create a new temporary \\c MDNode.  Suitable for use in constructing cyclic"] # [no_mangle] pub unsafe extern "C" fn LLVMTemporaryMDNode (Ctx : LLVMContextRef , Data : * mut LLVMMetadataRef , NumElements : :: libc :: size_t ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMTemporaryMDNode (Ctx , Data , NumElements) } # [doc = " Deallocate a temporary node."] # [no_mangle] pub unsafe extern "C" fn LLVMDisposeTemporaryMDNode (TempNode : LLVMMetadataRef) { llvm_sys :: debuginfo :: LLVMDisposeTemporaryMDNode (TempNode) } # [doc = " Replace all uses of temporary metadata."] # [no_mangle] pub unsafe extern "C" fn LLVMMetadataReplaceAllUsesWith (TempTargetMetadata : LLVMMetadataRef , Replacement : LLVMMetadataRef ,) { llvm_sys :: debuginfo :: LLVMMetadataReplaceAllUsesWith (TempTargetMetadata , Replacement) } # [doc = " Create a new descriptor for the specified global variable that is temporary"] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateTempGlobalVariableFwdDecl (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , Linkage : * const :: libc :: c_char , LnkLen : :: libc :: size_t , File : LLVMMetadataRef , LineNo : :: libc :: c_uint , Ty : LLVMMetadataRef , LocalToUnit : LLVMBool , Decl : LLVMMetadataRef , AlignInBits : u32 ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateTempGlobalVariableFwdDecl (Builder , Scope , Name , NameLen , Linkage , LnkLen , File , LineNo , Ty , LocalToUnit , Decl , AlignInBits) } # [doc = " Insert a new llvm.dbg.declare intrinsic call before the given instruction."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderInsertDeclareBefore (Builder : LLVMDIBuilderRef , Storage : LLVMValueRef , VarInfo : LLVMMetadataRef , Expr : LLVMMetadataRef , DebugLoc : LLVMMetadataRef , Instr : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: debuginfo :: LLVMDIBuilderInsertDeclareBefore (Builder , Storage , VarInfo , Expr , DebugLoc , Instr) } # [doc = " Insert a new llvm.dbg.declare intrinsic call at the end of the given basic block. If the basic block has a terminator instruction, the intrinsic is inserted before that terminator instruction."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderInsertDeclareAtEnd (Builder : LLVMDIBuilderRef , Storage : LLVMValueRef , VarInfo : LLVMMetadataRef , Expr : LLVMMetadataRef , DebugLoc : LLVMMetadataRef , Block : LLVMBasicBlockRef ,) -> LLVMValueRef { llvm_sys :: debuginfo :: LLVMDIBuilderInsertDeclareAtEnd (Builder , Storage , VarInfo , Expr , DebugLoc , Block) } # [doc = " Insert a new llvm.dbg.value intrinsic call before the given instruction."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderInsertDbgValueBefore (Builder : LLVMDIBuilderRef , Val : LLVMValueRef , VarInfo : LLVMMetadataRef , Expr : LLVMMetadataRef , DebugLoc : LLVMMetadataRef , Instr : LLVMValueRef ,) -> LLVMValueRef { llvm_sys :: debuginfo :: LLVMDIBuilderInsertDbgValueBefore (Builder , Val , VarInfo , Expr , DebugLoc , Instr) } # [doc = " Insert a new llvm.dbg.value intrinsic call at the end of the given basic block. If the basic block has a terminator instruction, the intrinsic is inserted before that terminator instruction."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderInsertDbgValueAtEnd (Builder : LLVMDIBuilderRef , Val : LLVMValueRef , VarInfo : LLVMMetadataRef , Expr : LLVMMetadataRef , DebugLoc : LLVMMetadataRef , Block : LLVMBasicBlockRef ,) -> LLVMValueRef { llvm_sys :: debuginfo :: LLVMDIBuilderInsertDbgValueAtEnd (Builder , Val , VarInfo , Expr , DebugLoc , Block) } # [doc = " Create a new descriptor for a local auto variable."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateAutoVariable (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , File : LLVMMetadataRef , LineNo : :: libc :: c_uint , Ty : LLVMMetadataRef , AlwaysPreserve : LLVMBool , Flags : LLVMDIFlags , AlignInBits : u32 ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateAutoVariable (Builder , Scope , Name , NameLen , File , LineNo , Ty , AlwaysPreserve , Flags , AlignInBits) } # [doc = " Create a new descriptor for a function parameter variable."] # [no_mangle] pub unsafe extern "C" fn LLVMDIBuilderCreateParameterVariable (Builder : LLVMDIBuilderRef , Scope : LLVMMetadataRef , Name : * const :: libc :: c_char , NameLen : :: libc :: size_t , ArgNo : :: libc :: c_uint , File : LLVMMetadataRef , LineNo : :: libc :: c_uint , Ty : LLVMMetadataRef , AlwaysPreserve : LLVMBool , Flags : LLVMDIFlags ,) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMDIBuilderCreateParameterVariable (Builder , Scope , Name , NameLen , ArgNo , File , LineNo , Ty , AlwaysPreserve , Flags) } # [doc = " Get the metadata of the subprogram attached to a function."] # [no_mangle] pub unsafe extern "C" fn LLVMGetSubprogram (Func : LLVMValueRef) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMGetSubprogram (Func) } # [doc = " Set the subprogram attached to a function."] # [no_mangle] pub unsafe extern "C" fn LLVMSetSubprogram (Func : LLVMValueRef , SP : LLVMMetadataRef) { llvm_sys :: debuginfo :: LLVMSetSubprogram (Func , SP) } # [doc = " Get the line associated with a given subprogram."] # [no_mangle] pub unsafe extern "C" fn LLVMDISubprogramGetLine (Subprogram : LLVMMetadataRef) -> :: libc :: c_uint { llvm_sys :: debuginfo :: LLVMDISubprogramGetLine (Subprogram) } # [doc = " Get the debug location for the given instruction."] # [no_mangle] pub unsafe extern "C" fn LLVMInstructionGetDebugLoc (Inst : LLVMValueRef) -> LLVMMetadataRef { llvm_sys :: debuginfo :: LLVMInstructionGetDebugLoc (Inst) } # [doc = " Set the debug location for the given instruction."] # [no_mangle] pub unsafe extern "C" fn LLVMInstructionSetDebugLoc (Inst : LLVMValueRef , Loc : LLVMMetadataRef) { llvm_sys :: debuginfo :: LLVMInstructionSetDebugLoc (Inst , Loc) } # [doc = " Obtain the enumerated type of a metadata instance."] # [no_mangle] pub unsafe extern "C" fn LLVMGetMetadataKind (Metadata : LLVMMetadataRef) -> LLVMMetadataKind { llvm_sys :: debuginfo :: LLVMGetMetadataKind (Metadata) }